# Internal development notes ‚Äî for AI assistant only
Purpose: maintain project context and continuity.

## R√àGLES DE COMMUNICATION
‚Ä¢ **R√®gle silence = accord** : Si pas de r√©ponse dans 5 secondes apr√®s une proposition d'√©tape, continuer automatiquement

2025-08-16
‚Ä¢ Development approach: Test Driven Development (TDD).
  ‚Äì Write failing tests first, then implement code until they pass.
  ‚Äì IMPORTANT: ALWAYS write tests FIRST, never implement code before tests!
  ‚Äì Order: 1) Write failing test, 2) Run test to confirm failure, 3) Write minimal code to pass test
  ‚Äì Progress by logical entity: First test ONE fixture displays correctly (all elements, data, buttons, links, etc.), then ONLY AFTER that, test that ALL fixtures display
  ‚Äì NEVER impose naming conventions or decisions - ALWAYS ask questions for validation
  ‚Äì ‚ö†Ô∏è CRITICAL RULE: ALWAYS fix ALL failing tests before moving forward. Never ignore existing failures when adding new features.
‚Ä¢ Project: VSCode extension "Dico Sc√©nario"
  ‚Äì Personal tool to help conceive a dictionary on screenplay/narrative writing for paper book publication
  ‚Äì Uses SQLite database with Entry, Example, Film models
  ‚Äì WebView panels for Dictionary, Films, Examples
  ‚Äì UI: Everything keyboard-controllable (buttons are secondary)
  ‚Äì Test data: Fixed test fixtures in src/test/fixtures/TestData.ts (no need to clean DB between tests)
  ‚Äì Data loading: All data loaded and displayed immediately on 'dico-cnario.ouvre' command

‚Ä¢ Database locations (IMPORTANT - for copies and troubleshooting):
  ‚Äì Test database: /tmp/vscode-test/dico-test.db
  ‚Äì Development database (VSCode Insiders): /Users/philippeperret/Library/Application Support/Code - Insiders/User/globalStorage/undefined_publisher.dico-cnario/dico.db
  ‚Äì NOTE: User uses VSCode Insiders, NOT regular VSCode!
  ‚Äì Test DB contains: 24 entries, 4 films, 7 examples (after removing orphaned examples)
  ‚Äì Tests NEVER affect development database (completely separate)

## TRAVAIL √Ä REPRENDRE DEMAIN (2025-08-17)

### PROBL√àME URGENT √Ä R√âSOUDRE
La base de donn√©es de test (dico-test.db) est ENCORE vide alors qu'on avait r√©solu ce probl√®me !
Il faut comprendre pourquoi les fixtures ne se chargent plus et corriger cela en priorit√©.

### OBJECTIF PRINCIPAL : Impl√©mentation du filtrage des mots c√¥t√© client

#### APPROCHE TDD (COMMENCER PAR LES TESTS !)

1. **D'ABORD : R√©parer la base de donn√©es de test**
   - V√©rifier pourquoi les fixtures ne se chargent plus
   - S'assurer que `ensureDatabaseFixtures` fonctionne correctement
   - Remplir la base avec les donn√©es de test

2. **Identifier des pr√©fixes pour les tests**
   Algorithme simple pour trouver des groupes de mots :
   - R√©cup√©rer tous les mots (entrees) de la base
   - Prendre le premier mot, extraire ses 3 premi√®res lettres
   - Chercher tous les mots qui commencent par ces 3 lettres
   - S'il y en a au moins 3, on a notre pr√©fixe de test
   - Sinon, passer au mot suivant
   - Si aucun groupe avec 3 lettres, recommencer avec 2 lettres
   - Si aucun groupe avec 2 lettres, utiliser 1 lettre

3. **√âcrire le test d'int√©gration pour le filtrage (panel Entries)**
   - Ouvrir le panel Entries
   - Attendre que les donn√©es soient charg√©es (allPanelsReady)
   - Taper un pr√©fixe dans le champ de recherche
   - V√©rifier que seules les entr√©es qui commencent par ce pr√©fixe sont visibles
   - V√©rifier que les autres entr√©es sont cach√©es (display: none)

4. **Impl√©menter le filtrage c√¥t√© client**
   - Ajouter un input de recherche dans le template HTML
   - Ajouter un listener sur l'input pour filtrer en temps r√©el
   - Fonction de filtre : startsWith() avec au minimum 2 caract√®res
   - Masquer/afficher les √©l√©ments DOM (display: block/none)

#### STATUT ACTUEL
- Le syst√®me allPanelsReady() fonctionne et acc√©l√®re les tests
- Le refactor avec BaseModel/classes est termin√©
- Il reste le test TDD pour le groupement par film (todo en attente)
- La base de donn√©es de test est vide et doit √™tre r√©par√©e

#### ORDRE DES PRIORIT√âS DEMAIN
1. ‚úÖ R√©parer la base de donn√©es de test
2. ‚úÖ Trouver des pr√©fixes de test 
3. ‚úÖ √âcrire le test de filtrage (TDD)
4. üöß Impl√©menter le filtrage c√¥t√© client
   - ‚úÖ Fix test methods (getElements, getVisibleElements, etc.)
   - üìù TODO: Implement cache system first, then filtering
   - Cache structure: entries{id,entree}, films{id,titre_*}, exemples{id,content,film_titles,entry_name}
   - Generic filterMatch() method in each panel class
   - Wire search input to cache-based filtering
5. Faire passer le test
