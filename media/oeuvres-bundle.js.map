{
  "version": 3,
  "sources": ["../src/bothside/RpcChannel.ts", "../src/webviews/RpcClient.ts", "../src/webviews/ClientItem.ts", "../src/webviews/ClientPanel.ts", "../src/bothside/StringUtils.ts", "../src/webviews/oeuvres/Oeuvre.ts"],
  "sourcesContent": ["/**\n * Canal RPC pour communiquer entre extension et webview.\n * Les deux c\u00F4t\u00E9s chargent ce module.\n */\ntype Request = {\n  id: number;\n  method: string;\n  params: any;\n};\n\ntype Response = {\n  id: number;\n  result: any;\n};\n\ntype Notification = {\n  method: string;\n  params: any;\n};\n\nexport class RpcChannel {\n  private counter = 0;\n  private pending = new Map<number, (value: any) => void>();\n  private handlers = new Map<string, (params: any) => any>();\n\n  constructor(\n    private sender: (msg: any) => void,\n    private receiver: (cb: (msg: any) => void) => void\n  ) {\n    this.receiver(this.handleMessage.bind(this));\n  }\n\n  private handleMessage(msg: any) {\n    if (\"id\" in msg && \"method\" in msg) {\n      // C\u2019est une requ\u00EAte (ask c\u00F4t\u00E9 oppos\u00E9)\n      const handler = this.handlers.get(msg.method);\n      if (handler) {\n        Promise.resolve(handler(msg.params)).then((result) => {\n          this.sender({ id: msg.id, result });\n        });\n      }\n    } else if (\"id\" in msg && \"result\" in msg) {\n      // R\u00E9ponse\n      const cb = this.pending.get(msg.id);\n      if (cb) {\n        cb(msg.result);\n        this.pending.delete(msg.id);\n      }\n    } else if (\"method\" in msg) {\n      // Notification (notify c\u00F4t\u00E9 oppos\u00E9)\n      const handler = this.handlers.get(msg.method);\n      if (handler) {\n        handler(msg.params);\n      }\n    }\n  }\n\n  ask(method: string, params?: any): Promise<any> {\n    const id = this.counter++;\n    const req: Request = { id, method, params };\n    this.sender(req);\n    return new Promise((resolve) => {\n      this.pending.set(id, resolve);\n    });\n  }\n\n  notify(method: string, params?: any) {\n    const notif: Notification = { method, params };\n    this.sender(notif);\n  }\n\n  on(method: string, handler: (params: any) => any) {\n    this.handlers.set(method, handler);\n  }\n}\n", "import { RpcChannel } from \"../bothside/RpcChannel\";\n\nexport function createRpcClient() {\n  return new RpcChannel(\n    (msg) => window.parent.postMessage(msg, \"*\"),\n    (cb) => window.addEventListener(\"message\", (event) => cb(event.data))\n  );\n}\n", "import { UEntry } from \"../bothside/UEntry\";\nimport { UExemple } from \"../bothside/UExemple\";\nimport { UOeuvre } from \"../bothside/UOeuvre\";\nimport { Entry } from \"./entries/Entry\";\nimport { Exemple } from \"./exemples/Exemple\";\nimport { Oeuvre } from \"./oeuvres/Oeuvre\";\nimport { FullEntry } from \"../extension/models/Entry\";\nimport { FullOeuvre } from \"../extension/models/Oeuvre\";\nimport { FullExemple } from \"../extension/models/Exemple\";\n\ntype Tel_u = FullEntry | FullOeuvre | FullExemple;\ntype Tel = typeof Entry | typeof Oeuvre | typeof Exemple;\n\nexport abstract class ClientItem<Tel, Tel_u> {\n  data: Tel_u;\n  static klass: any;\n  static allItems: any[];\n  static deserializeItems(items: string[]) {\n    this.allItems = items.map( item => new this.klass(JSON.parse(item)));\n    return this.allItems;\n  }\n  constructor(itemData: Tel_u){\n    this.data = itemData;\n  } \n}", "import { Entry } from \"./entries/Entry\";\nimport { Exemple } from \"./exemples/Exemple\";\nimport { Oeuvre } from \"./oeuvres/Oeuvre\";\n\ntype AnyElementClass = Entry | Oeuvre | Exemple;\n\nexport abstract class ClientPanel {\n  static readonly minName: string;\n  static readonly titName: string;\n  static _container: HTMLElement | null;\n  static _itemTemplate: HTMLTemplateElement | null;\n  static _searchInput: HTMLInputElement | null;\n  protected static get allItems(): any[]{ return []; };\n\n  static get container(): HTMLElement | null { return this._container || (this._container = document.querySelector('main#items')); }\n  static get itemTemplate(): HTMLTemplateElement | null { return this._itemTemplate || (this._itemTemplate = document.querySelector('template#item-template')); }\n  static get searchInput(): HTMLInputElement | null { return this._searchInput || (this._searchInput = document.querySelector('#search-input')); }\n\n  static cloneItemTemplate(): DocumentFragment | null {\n    return this.itemTemplate!.content.cloneNode(true) as DocumentFragment;\n  }\n  static populate(items: AnyElementClass[]): void {\n    items.forEach((item: AnyElementClass, index: number) => {\n      const data = item.data;\n      const clone = this.cloneItemTemplate() as DocumentFragment;\n      const mainElement = clone.querySelector('.' + this.minName);\n      if (mainElement) {\n        mainElement.setAttribute('data-id', data.id);\n        mainElement.setAttribute('data-index', index.toString());\n      }\n      // R\u00E9gler les props\n      Object.keys(data).forEach(prop => {\n        let value = ((data as unknown) as Record<string, string>)[prop] as string;\n        value = String(value);\n        clone\n          .querySelectorAll(`[data-prop=\"${prop}\"]`)\n          .forEach(element => {\n            if (value.startsWith('<')) {\n              element.innerHTML = value;\n            } else {\n              element.textContent = value;\n            }\n          });\n      });\n      // Et on l'ajoute au conteneur\n      this.container && this.container.appendChild(clone);\n    });\n\n    // TODO Ici, plus tard, on pourra appeler afterDisplayItems\n\n    // Pour observer le panneau (les boutons, le champ de filtre, etc.)\n    this.observePanel();\n  }\n\n\n  // Attention, certains panneaux ont leur propre m\u00E9thode, qui peut \n  // aussi appeler celle-ci\n  static observePanel(): void {\n   // \u00C9couter le champ de filtre en haut des panneaux\n    const Input = this.searchInput as HTMLInputElement;\n    Input.addEventListener('input', this.filterItems.bind(this));\n    Input.addEventListener('keyup', this.filterItems.bind(this));\n  }\n\n  static filterItems(ev: any) {\n    const Input = this.searchInput as HTMLInputElement;\n    const searched = Input.value.trim();\n    const allCount = this.allItems.length;\n    const matchingItems: any[] = this.searchMatchingItems(searched);\n    const matchingCount = matchingItems.length;\n    console.log('[CLIENT %s] Filtering with \"%s\" - %i founds / %i', this.titName, searched, matchingCount, allCount);\n    const matchingIds = new Set(matchingItems.map(item => item.data.id));\n    this.allItems.forEach(item => {\n      const display = matchingIds.has(item.data.id) ? 'block' : 'none';\n      if (item.data.display !== display) {\n        // <= L'item a chang\u00E9 d'\u00E9tat\n        // => Il faut le modifier dans le DOM\n        const obj = document.querySelector(`main#items > div.item[data-id=\"${item.data.id}\"]`) as HTMLDivElement;\n        obj.style.display = display;\n        item.data.display = display;\n        item.data.selected = false; // TODO en faire plus\n      };\n    });\n    // TODO Traiter la s\u00E9lection (toujours la mettre au premier \u00E9l\u00E9ment visible)\n  };\n  // M\u00E9thode de filtrage qui re\u00E7oit les \u00E9v\u00E8nements Input\n\n\n  // Fonction de recherche qui doit \u00EAtre surclass\u00E9e par toutes les\n  // classes h\u00E9riti\u00E8re\n  static searchMatchingItems(search: string): any[] {\n    return [];\n  }\n  static filter(filtre: (item: AnyElementClass) => boolean): AnyElementClass[] {\n    const result: AnyElementClass[] = [];\n    this.allItems.forEach(item => { filtre(item.data) && result.push(item); });\n    return result;\n  }\n\n}\n\n", "/**\n * Utilitaire pour normaliser les cha\u00EEnes de caract\u00E8res\n * (suppression des accents, minuscules, etc.)\n */\nexport class StringNormalizer {\n  /**\n   * Normalise une cha\u00EEne en minuscules\n   */\n  static toLower(text: string): string {\n    return text.toLowerCase();\n  }\n\n  /**\n   * Normalise une cha\u00EEne en supprimant les accents et diacritiques\n   * TODO: \u00C0 am\u00E9liorer avec une vraie fonction de normalisation\n   */\n  static rationalize(text: string): string {\n    return text\n      .toLowerCase()\n      .normalize('NFD') // D\u00E9compose les caract\u00E8res accentu\u00E9s\n      .replace(/[\\u0300-\\u036f]/g, '') // Supprime les marques diacritiques\n      .replace(/[^a-zA-Z0-9]/g, '');  // note : si c'\u00E9tait avant la ligne pr\u00E9c\u00E9dente, il n'y aurait pas besoin de la ligne pr\u00E9c\u00E9dente\u2026\n  }\n}\n", "import { UOeuvre } from '../../bothside/UOeuvre';\nimport { RpcChannel } from '../../bothside/RpcChannel';\nimport { createRpcClient } from '../RpcClient';\nimport { ClientItem } from '../ClientItem';\nimport { ClientPanel } from '../ClientPanel';\nimport { FullOeuvre } from '../../extension/models/Oeuvre';\nimport { StringNormalizer } from '../../bothside/StringUtils';\n\nexport class Oeuvre extends ClientItem<UOeuvre, FullOeuvre> {\n  static readonly minName = 'oeuvre';\n static readonly klass = Oeuvre;\n\n}\n\nclass PanelOeuvre extends ClientPanel {\n  static readonly minName = 'oeuvre';\n  static readonly titName = 'Oeuvre';\n  static get allItems() { return Oeuvre.allItems; }\n  static searchMatchingItems(searched: string): Oeuvre[] {\n    const searchLower = StringNormalizer.toLower(searched);\n    return this.filter((oeuvreData: {[k:string]: any}) => {\n      return oeuvreData.titresLookUp.some((titre: string) => {\n        return titre.substring(0, searchLower.length) === searchLower;\n      });\n    }) as Oeuvre[];\n  }\n}\n\nconst rpcOeuvre:RpcChannel = createRpcClient();\nrpcOeuvre.on('populate', (params) => {\n  const items = Oeuvre.deserializeItems(params.data);\n  console.log(\"[CLIENT-Oeuvres] Items d\u00E9s\u00E9rialis\u00E9s\", items);\n  PanelOeuvre.populate(items);\n});\n\n\n(window as any).Oeuvre = Oeuvre ;"],
  "mappings": "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",
  "names": []
}
