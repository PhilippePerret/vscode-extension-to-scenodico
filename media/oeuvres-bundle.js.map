{
  "version": 3,
  "sources": ["../src/webviews/CacheManager.ts", "../src/webviews/CacheTypes.ts", "../src/webviews/CommonClassItem.ts", "../src/webviews/oeuvres/Oeuvre.ts"],
  "sourcesContent": ["export interface CacheableItem {\n  id: string;\n  [key: string]: any;\n}\n\n/**\n * Gestionnaire de cache g\u00E9n\u00E9rique utilisant une Map index\u00E9e par ID\n * pour un acc\u00E8s O(1) aux \u00E9l\u00E9ments\n */\nexport class CacheManager<TRaw extends CacheableItem, TCached extends CacheableItem> {\n  private _cache: Map<string, TCached> = new Map();\n  private _isBuilt: boolean = false;\n  private _isPrepared: boolean = false;\n\n  prepareCacheWithData(\n    rawData: TRaw[],\n    prepareItemForCacheMethod: (item: TRaw) => TCached,\n    debugName:string\n  ): void {\n    // Initialisation de la Map\n    this._cache.clear();\n\n    rawData.forEach(item => {\n      this._cache.set(item.id, prepareItemForCacheMethod(item));\n    });\n    \n    this._isPrepared = true ;\n    console.log(`Cache pr\u00E9par\u00E9 pour ${debugName}: ${this._cache.size} \u00E9l\u00E9ments`);\n  }\n  /**\n   * Construit le cache \u00E0 partir des donn\u00E9es brutes\n   * @param rawData - Donn\u00E9es brutes de la base de donn\u00E9es\n   * @param prepareFunction - Fonction de pr\u00E9paration des donn\u00E9es pour le cache\n   * @param debugName - Nom pour les logs de debug\n   */\n  buildCache(\n    finalizeCachedItemMethod: (item: TCached) => TCached,\n    debugName: string\n  ): void {\n    // On boucle sur les donn\u00E9es qui ont \u00E9t\u00E9 mises en cache.\n    this._cache.forEach(item => {\n      this._cache.set(item.id, finalizeCachedItemMethod(item));\n    });\n    \n    this._isBuilt = true;\n    console.log(`Cache construit pour ${debugName} \u00E9l\u00E9ments`);\n  }\n\n  /**\n   * R\u00E9cup\u00E8re un \u00E9l\u00E9ment par son ID\n   * @param id - ID de l'\u00E9l\u00E9ment \u00E0 r\u00E9cup\u00E9rer\n   * @returns L'\u00E9l\u00E9ment trouv\u00E9 ou null\n   */\n  get(id: string): TCached | null {\n    return this._cache.get(id) || null;\n  }\n\n  /**\n   * R\u00E9cup\u00E8re tous les \u00E9l\u00E9ments du cache sous forme d'array\n   * @returns Array de tous les \u00E9l\u00E9ments cach\u00E9s\n   */\n  getAll(): TCached[] {\n    return Array.from(this._cache.values());\n  }\n\n  /**\n   * R\u00E9cup\u00E8re toutes les cl\u00E9s (IDs) du cache\n   * @returns Array de tous les IDs\n   */\n  getAllIds(): string[] {\n    return Array.from(this._cache.keys());\n  }\n\n  /**\n   * It\u00E8re sur tous les \u00E9l\u00E9ments du cache\n   * @param callback - Fonction appel\u00E9e pour chaque \u00E9l\u00E9ment\n   */\n  forEach(callback: (item: TCached, id: string) => void): void {\n    this._cache.forEach((item, id) => callback(item, id));\n  }\n\n  /**\n   * Filtre les \u00E9l\u00E9ments du cache\n   * @param predicate - Fonction de filtrage\n   * @returns Array des \u00E9l\u00E9ments qui correspondent au crit\u00E8re\n   */\n  filter(predicate: (item: TCached, id: string) => boolean): TCached[] {\n    const result: TCached[] = [];\n    this._cache.forEach((item, id) => {\n      if (predicate(item, id)) {\n        result.push(item);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Cherche un \u00E9l\u00E9ment selon un crit\u00E8re\n   * @param predicate - Fonction de recherche\n   * @returns Premier \u00E9l\u00E9ment trouv\u00E9 ou null\n   */\n  find(predicate: (item: TCached, id: string) => boolean): TCached | null {\n    for (const [id, item] of this._cache) {\n      if (predicate(item, id)) {\n        return item;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Vide le cache\n   */\n  clear(): void {\n    this._cache.clear();\n    this._isBuilt = false;\n  }\n\n  /**\n   * V\u00E9rifie si le cache est construit\n   */\n  get isBuilt(): boolean {\n    return this._isBuilt;\n  }\n\n  /**\n   * Retourne la taille du cache\n   */\n  get size(): number {\n    return this._cache.size;\n  }\n\n  /**\n   * V\u00E9rifie si un ID existe dans le cache\n   * @param id - ID \u00E0 v\u00E9rifier\n   */\n  has(id: string): boolean {\n    return this._cache.has(id);\n  }\n}\n", "import { CacheableItem } from './CacheManager';\n\n/**\n * Utilitaire pour normaliser les cha\u00EEnes de caract\u00E8res\n * (suppression des accents, minuscules, etc.)\n */\nexport class StringNormalizer {\n  /**\n   * Normalise une cha\u00EEne en minuscules\n   */\n  static toLower(text: string): string {\n    return text.toLowerCase();\n  }\n\n  /**\n   * Normalise une cha\u00EEne en supprimant les accents et diacritiques\n   * TODO: \u00C0 am\u00E9liorer avec une vraie fonction de normalisation\n   */\n  static rationalize(text: string): string {\n    return text\n      .toLowerCase()\n      .normalize('NFD') // D\u00E9compose les caract\u00E8res accentu\u00E9s\n      .replace(/[\\u0300-\\u036f]/g, '') // Supprime les marques diacritiques\n      .replace(/[^a-zA-Z0-9]/g, '');  // note : si c'\u00E9tait avant la ligne pr\u00E9c\u00E9dente, il n'y aurait pas besoin de la ligne pr\u00E9c\u00E9dente\u2026\n  }\n}\n\n// ============================================================\n// INTERFACES POUR LES DONN\u00C9ES EN CACHE\n// ============================================================\n\n/**\n * Donn\u00E9es d'une entr\u00E9e en cache (optimis\u00E9es pour la recherche)\n */\nexport interface CachedEntryData extends CacheableItem {\n  id: string;\n  entree: string;\n  entree_min: string;              // Version minuscules pour recherche\n  entree_min_ra: string;           // Version rationalis\u00E9e (sans accents) \n  categorie_id?: string;\n  categorie?: string;              // Nom de la cat\u00E9gorie (r\u00E9solu via Entry.get())\n  genre?: string;\n}\n\n/**\n * Donn\u00E9es d'une \u0153uvre en cache (optimis\u00E9es pour la recherche)\n */\nexport interface CachedOeuvreData extends CacheableItem {\n  id: string;\n  titre_affiche: string;\n  titre_original?: string;\n  titre_francais?: string;\n  titres: string[];                // Tous les titres combin\u00E9s pour recherche\n  titresLookUp: string[];            // Versions minuscules des titres\n  annee?: number;\n  auteurs?: string;\n}\n\n/**\n * Donn\u00E9es d'un exemple en cache (optimis\u00E9es pour la recherche) \n */\nexport interface CachedExempleData extends CacheableItem {\n  id: string;\n  content: string;\n  content_min: string;             // Version minuscules pour recherche\n  content_min_ra: string;          // Version rationalis\u00E9e (sans accents)\n  oeuvre_id?: string;\n  oeuvre_titre?: string;           // Titre de l'oeuvre (r\u00E9solu via Oeuvre.get())\n  entry_id?: string;\n  entry_entree?: string;           // Entr\u00E9e associ\u00E9e (r\u00E9solue via Entry.get())\n}\n\n// ============================================================\n// TYPES D'AIDE POUR LE TYPAGE FORT\n// ============================================================\n\n/**\n * Type union pour tous les types de donn\u00E9es mises en cache\n */\nexport type AnyCachedData = CachedEntryData | CachedOeuvreData | CachedExempleData;\n", "import { CacheManager, CacheableItem } from './CacheManager';\nimport { AnyCachedData, CachedExempleData } from './CacheTypes';\n\nexport interface ItemData extends CacheableItem {\n  id: string;\n  [key: string]: any;\n}\n\nexport abstract class CommonClassItem {\n  private static _container: HTMLElement | null = null;\n  private static _template: HTMLTemplateElement | null = null;\n\n  // Propri\u00E9t\u00E9s qui doivent \u00EAtre d\u00E9finies par les classes filles\n  static readonly minName: string;\n  static readonly ERRORS: { [key: string]: string };\n\n  // Cache manager - chaque classe fille doit fournir sa propre instance\n  protected static get cacheManager(): CacheManager<any, any> {\n    throw new Error('cacheManager getter must be implemented by subclass');\n  }\n\n  static get container(): HTMLElement | null {\n    return this._container || (this._container = document.querySelector('main#items'));\n  }\n\n  static get template(): HTMLTemplateElement | null {\n    return this._template || (this._template = document.querySelector('template#item-template'));\n  }\n\n  static error(errorId: string): string {\n    // Cette propri\u00E9t\u00E9 doit \u00EAtre d\u00E9finie par chaque classe fille\n    const errors = (this as any).ERRORS;\n    return errors?.[errorId] || `Unknown error: ${errorId}`;\n  }\n\n  /**\n   * Formate une propri\u00E9t\u00E9 pour l'affichage\n   * DOIT \u00EAtre surcharg\u00E9e par chaque classe fille\n   */\n  static formateProp(prop: string, value: any): string {\n    throw new Error('formateProp must be implemented by subclass');\n  }\n\n  /**\n   * Pr\u00E9pare un item pour le cache de recherche\n   * DOIT \u00EAtre surcharg\u00E9e par chaque classe fille\n   */\n  static prepareItemForCache(item: ItemData): any {\n    throw new Error('prepareItemForCache must be implemented by subclass');\n  }\n  // Doit \u00EAtre \u00E9cras\u00E9 par chaque classe fille (il semble que je doive\n  // faire comme \u00E7a pour ne pas avoir d'erreur d'absence de m\u00E9thode)\n  protected static searchMatchingItems(searched: string): AnyCachedData[]{\n    throw new Error(`La m\u00E9thode searchMatchingItems doit \u00EAtre impl\u00E9ment\u00E9e par la classe ${this.name}`);\n  }\n\n  /**\n   * Construit le cache \u00E0 partir des donn\u00E9es en base de donn\u00E9es\n   * Dans un premier temps, les donn\u00E9es sont mises telle quelles\n   * Puis, une fois qu'elles seront toutes charg\u00E9es (pour tous les\n   * \u00E9l\u00E9ments) on pourra pr\u00E9parer chaque item.\n   */\n  static buildCache(bddData: ItemData[]): void {\n    console.log(`[${this.name}] buildCache called with ${bddData.length} items`);\n    try {\n      this.cacheManager.prepareCacheWithData(\n        bddData,\n        (item) => this.prepareItemForCache(item),\n        (this as any).minName\n      );\n      console.log(`[${this.name}] Cache built successfully, size: ${this.cacheSize}`);\n    } catch (error) {\n      console.error(`[${this.name}] Cache build failed:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Finalise les donn\u00E9es mises en cache, maintenant qu'elles ont \u00E9t\u00E9\n   * charg\u00E9es pour tous les \u00E9l\u00E9ments\n   */\n  public static finalizeCachedData(): typeof CommonClassItem {\n    const items = this.getAll();\n    console.error(`[WEBVIEW] Il faut que je finalise les donn\u00E9es ${this.minName}`);\n    return this; // pour le chainage\n  }\n  /**\n   * Peuple le panneau de l'\u00E9l\u00E9ment avec les donn\u00E9es mises en cache\n   */\n  public static populatePanel(): typeof CommonClassItem {\n    const container = this.container as HTMLDivElement;\n    container.innerHTML = '';\n    const items = this.getAll();\n    if (items.length === 0) {\n      container.innerHTML = `<div class=\"no-${this.minName}\">${this.error('no-items')}</div>`;\n      return this;\n    }\n    items.forEach((item, index) => {\n      // Clone the template\n      const clone = this.template!.content.cloneNode(true) as DocumentFragment;\n\n      // Set the id and index attributes on the main element\n      const mainElement = clone.querySelector('.' + this.minName);\n      if (mainElement) {\n        if (item.id) {\n          mainElement.setAttribute('data-id', item.id);\n        }\n        mainElement.setAttribute('data-index', index.toString());\n      }\n\n      // Populate all elements with data-prop attributes\n      Object.keys(item).forEach(prop => {\n        const elements = clone.querySelectorAll(`[data-prop=\"${prop}\"]`);\n        elements.forEach(element => {\n          element.textContent = this.formateProp(prop, item[prop]);\n        });\n      });\n\n      // Append to container\n      container!.appendChild(clone);\n    });\n\n    // Call afterDisplayItems for specific panel types with correct context\n    this.afterDisplayItems();\n\n    return this; // pour le chainage\n  }\n\n\n  /**\n   * M\u00E9thode qui observe le panneau, \u00E0 commencer par la captation des\n   * touches et le champ de recherche/filtrage\n   * TODO Mettre un picto filtrage devant le champ\n   * \n   */\n  public static observePanel(): typeof CommonClassItem {\n    const searchInput = document.querySelector('#search-input') as HTMLInputElement;\n    // Pour conserver l'\u00E9tat de chaque d\u00E9finition\n    // TODO Voir si on ne peut pas tout simplement mettre la propri\u00E9t\u00E9\n    // displayed et selected dans la donn\u00E9e en cache.\n    const DomItemsState: Record<string, string> = {};\n    // Par d\u00E9faut, les d\u00E9finitions sont toujours affich\u00E9es\n    this.getAll().forEach(item => DomItemsState[item.id] = 'block');\n\n    // Fonction de filtrage\n    const filterEntries = () => {\n      const searchTerm = searchInput.value.trim();\n      const allItems = this.getAll();\n      const allCount = allItems.length;\n      console.log(`[SEARCH ENTRY] Filtering with term: \"${searchTerm}\", total entries: ${allCount}`);\n      const matchingItems: AnyCachedData[] = this.searchMatchingItems(searchTerm);\n      const matchingCount = matchingItems.length;\n      console.log('[SEARCH ENTRY] Cache search found %i matches / %i', matchingCount, allCount);\n      // TODO On pourrait directement renvoyer ce Set par searchByPrefix\n      const matchingIds = new Set(matchingItems.map(item => item.id));\n\n      allItems.forEach(item => {\n        const display: string = matchingIds.has(item.id) ? 'block' : 'none';\n        // [SEARCH item] Etat pour %s : actual: %s, nouveau %s\", item.id, DomItemsState[item.id]);\n        if (DomItemsState[item.id] !== display) {\n          // Seulement quand l'\u00E9tat de l'\u00E9l\u00E9ment a chang\u00E9\n          const domObj = document.querySelector(`main#items > div.item[data-id=\"${item.id}\"]`) as HTMLDivElement;\n          domObj.style.display = display;\n          DomItemsState[item.id] = display;\n        }\n      });\n      // TODO\n      // D\u00E9selectionner l'\u00E9l\u00E9ment courant (si ce n'est pas le m\u00EAme) et s\u00E9lectionner le premier \u00E9l\u00E9ment\n      // affich\u00E9.\n      console.log(`[SEARCH ${this.minName}] Result:  %i shown, %i hidden`, matchingCount, allCount - matchingCount);\n    };\n\n    // \u00C9couter les \u00E9v\u00E9nements de saisie\n    searchInput.addEventListener('input', filterEntries);\n    searchInput.addEventListener('keyup', filterEntries);\n\n    return this; // pour le chainage\n  }\n  /**\n   * R\u00E9cup\u00E8re un \u00E9l\u00E9ment par son ID\n   * @param id - ID de l'\u00E9l\u00E9ment \u00E0 r\u00E9cup\u00E9rer\n   */\n  static get(id: string): AnyCachedData | null {\n    if (this.cacheManager.isBuilt === true) {\n      console.info(\"cache manager des oeuvre\", this.cacheManager);\n      throw new Error(\"Pour s'arr\u00EAter l\u00E0\");\n    }\n    return this.cacheManager.get(id);\n  }\n\n  /**\n   * R\u00E9cup\u00E8re tous les \u00E9l\u00E9ments du cache\n   */\n  static getAll(): AnyCachedData[] {\n    return this.cacheManager.getAll();\n  }\n\n  /**\n   * It\u00E8re sur tous les \u00E9l\u00E9ments du cache\n   * @param callback - Fonction appel\u00E9e pour chaque \u00E9l\u00E9ment\n   */\n  static forEach(callback: (item: AnyCachedData, id: string) => void): void {\n    this.cacheManager.forEach(callback);\n  }\n\n  /**\n   * Filtre les \u00E9l\u00E9ments du cache\n   * @param predicate - Fonction de filtrage\n   */\n  static filter(predicate: (item: AnyCachedData, id: string) => boolean): AnyCachedData[] {\n    return this.cacheManager.filter(predicate);\n  }\n\n  /**\n   * Efface le cache\n   */\n  static clearCache(): void {\n    this.cacheManager.clear();\n  }\n\n  /**\n   * V\u00E9rifie si le cache est construit\n   */\n  static get isCacheBuilt(): boolean {\n    return this.cacheManager.isBuilt;\n  }\n\n  /**\n   * Retourne la taille du cache\n   */\n  static get cacheSize(): number {\n    return this.cacheManager.size;\n  }\n\n  /**\n   * R\u00E9cup\u00E8re le cache (pour compatibilit\u00E9 avec les tests existants)\n   * @deprecated Utiliser les nouvelles m\u00E9thodes get(), getAll(), etc.\n   */\n  static get searchCache(): AnyCachedData[] | null {\n    const manager = this.cacheManager;\n    return manager.isBuilt ? manager.getAll() : null;\n  }\n\n  /**\n   * Post-traitement apr\u00E8s affichage des \u00E9l\u00E9ments\n   * Doit \u00EAtre surclass\u00E9 par les m\u00E9thodes propres aux diff\u00E9rents panneaux\n   */\n  static afterDisplayItems(): boolean {\n    return true;\n  }\n}\n", "import { CacheManager } from '../CacheManager';\nimport { CachedOeuvreData, StringNormalizer } from '../CacheTypes';\nimport { CommonClassItem, ItemData } from '../CommonClassItem';\n\nexport interface OeuvreData extends ItemData {\n  titre_affiche: string;\n  titre_original?: string;\n  titre_francais?: string;\n  annee?: number;\n  auteurs?: string;\n}\n\nexport class Oeuvre extends CommonClassItem {\n  static readonly minName = 'oeuvre';\n\n  private static readonly REG_ARTICLES = /\\b(an|a|the|le|la|les|l'|de|du)\\b/i ;\n  \n  // Cache manager sp\u00E9cifique aux oeuvres\n  private static _cacheManagerInstance: CacheManager<OeuvreData, CachedOeuvreData> = new CacheManager();\n  \n  protected static get cacheManager(): CacheManager<OeuvreData, CachedOeuvreData> {\n    return this._cacheManagerInstance;\n  }\n  // pour test\n  static get cacheManagerForced() { return this.cacheManager ; }\n  \n  static readonly ERRORS = {\n    'no-items': 'Aucune \u0153uvre dans la base, bizarrement\u2026',\n  };\n\n  static formateProp(prop: string, value: any): string {\n    switch(prop) {\n      case 'annee':\n        return value ? value.toString() : '';\n      default: \n        return value || '';\n    }\n  }\n\n  /**\n   * Pr\u00E9pare une \u0153uvre pour le cache de recherche\n   * SEULE m\u00E9thode sp\u00E9cifique - le reste h\u00E9rite de CommonClassItem !\n   */\n  static prepareItemForCache(oeuvre: OeuvreData): CachedOeuvreData {\n    // Cr\u00E9er un array avec tous les titres disponibles\n    const titres: string[] = [];\n\n    if (oeuvre.titre_francais) {\n      titres.push(StringNormalizer.rationalize(oeuvre.titre_francais));\n    }\n    if (oeuvre.titre_original) {\n      titres.push(StringNormalizer.rationalize(oeuvre.titre_original));\n    }\n    if (oeuvre.titre_affiche) {\n      titres.push(StringNormalizer.rationalize(oeuvre.titre_affiche));\n    }\n  \n    // Il faut supprimer les articles dans les titres\n    titres.forEach(titre => {\n      if ( titre.match(this.REG_ARTICLES)) {\n        titres.push(titre.replace(this.REG_ARTICLES, \"\"));\n      }\n    });\n\n    const uniqTitres: string[] = [];\n    titres.forEach(titre => {\n      if ( uniqTitres.includes(titre) ) { return ; }\n      uniqTitres.push(titre);\n    });\n\n    // Versions minuscules pour recherche\n    const titresLookUp = uniqTitres.map(titre => StringNormalizer.toLower(titre));\n    // console.info(\"titres min\", titresLookUp);\n    \n    return {\n      id: oeuvre.id,\n      titre_affiche: oeuvre.titre_affiche,\n      titre_original: oeuvre.titre_original,\n      titre_francais: oeuvre.titre_francais,\n      titres: titres,\n      titresLookUp: titresLookUp,\n      annee: oeuvre.annee,\n      auteurs: oeuvre.auteurs,\n    };\n  }\n\n  /**\n   * Recherche d'\u0153uvres par titre (optimis\u00E9e)\n   * M\u00E9thode sp\u00E9cifique Oeuvre\n   */\n  protected static searchMatchingItems(searchTerm: string): CachedOeuvreData[] {\n    const searchLower = StringNormalizer.toLower(searchTerm);\n    \n    return this.filter((oeuvre: any) => {\n      return oeuvre.titresLookUp.some((titre: string) => {\n        \n        const res: boolean = titre.startsWith(searchLower);\n        console.log(\"Le titre %s r\u00E9pond %s avec %s\", oeuvre.titre_affiche, res, searchLower);\n        return res ;\n      });\n    }) as CachedOeuvreData[];\n  }\n}"],
  "mappings": "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",
  "names": []
}
