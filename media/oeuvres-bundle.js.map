{
  "version": 3,
  "sources": ["../src/bothside/UniversalDicoElement.ts", "../src/bothside/UEntry.ts", "../src/webviews/entries/Entry.ts", "../src/bothside/UExemple.ts", "../src/webviews/exemples/Exemple.ts", "../src/webviews/common.ts", "../src/bothside/UOeuvre.ts", "../src/webviews/oeuvres/Oeuvre.ts"],
  "sourcesContent": ["import { TypeUnionElement } from \"./UnversalConstants\";\n\n// Les donn\u00E9es brutes telles qu'elles sont relev\u00E9es dans la base\nexport interface RawData {\n  id: string;\n  [key: string]: any;\n}\n\n// Les donn\u00E9es travaill\u00E9es et mise en cache\nexport interface CachedItem {\n  id: string;\n  [key: string]: any;\n  classe: TypeUnionElement;\n}\n\n/**\n * Class Universelle pour un Element quelconque\n * \n * Signifie que \u00E7a sert :\n *  - C\u00F4t\u00E9 Extension/C\u00F4t\u00E9 Webview (server/client)\n *  - Pour les Entry, Oeuvre et Exemples\n * \n */\nexport abstract class UniversalDicoElement {\n  [key: string]: any; // autorise `this[k]' dans le constructeur\n\n  // Le constructeur re\u00E7oit toujours un objet contenant\n  // Les donn\u00E9es. Dans un cas (extension) ce sont les donn\u00E9es\n  // provenant de la base de donn\u00E9es, dans l'autre cas (webview)\n  // ce sont les donn\u00E9es cach\u00E9es et pr\u00E9par\u00E9es\n  constructor(data: {[key: string]: any} ){\n    for ( const k in data) {\n      if (Object.prototype.hasOwnProperty.call(data, k)) { this[k] = data[k]; }\n    }\n  }\n}", "/**\n * Ce module contient les \u00E9l\u00E9ments utiles aussi bien c\u00F4t\u00E9 extension (serveur)\n * que c\u00F4t\u00E9 client (webview)\n */\nimport { UniversalDicoElement } from './UniversalDicoElement';\n\nexport class UEntry extends UniversalDicoElement {\n  [key: string]: any;\n  \n   static readonly GENRES = {\n    'nm': 'n.m.',\n    'nf': 'n.f.',\n    'np': 'n.pl.',\n    'vb': 'verbe',\n    'adj': 'adj.',\n    'adv': 'adv.'\n  };\n\n  constructor(data: {[key: string]: any}){\n    super(data);\n    // TODO D'autres traitement ici propres \u00E0 l'\u00E9l\u00E9ment, sinon le\n    // constructeur ne se justifie pas.\n  }\n\n}", "import '../common';\nimport { UEntry } from '../../bothside/UEntry';\n\nexport class Entry extends UEntry {\n  static readonly minName = 'entry';\n \n  // static readonly ERRORS = {\n  //   'no-items': 'Aucune entr\u00E9e dans la base, bizarrement\u2026',\n  // };\n\n  // /**\n  //  * Pr\u00E9pare une entr\u00E9e pour le cache de recherche\n  //  * SEULE m\u00E9thode sp\u00E9cifique - le reste h\u00E9rite de CommonClassItem !\n  //  */\n  // static prepareItemForCache(entry: EntryData): CachedEntryData {\n  //   const entreeNormalized    = StringNormalizer.toLower(entry.entree);\n  //   const entreeRationalized  = StringNormalizer.rationalize(entry.entree);\n   \n  //   return {\n  //     id: entry.id,\n  //     entree: entry.entree,\n  //     definition: undefined, // d\u00E9finition format\u00E9e\n  //     raw_definition: entry.definition,\n  //     entree_min: entreeNormalized,\n  //     entree_min_ra: entreeRationalized,\n  //     categorie_id: entry.categorie_id,\n  //     categorie: undefined,\n  //     genre: entry.genre,\n  //     genre_formated: undefined, // sera d\u00E9fini plus tard\n  //   };\n  // }\n\n\n  // /**\n  //  * M\u00E9thode qui, apr\u00E8s chargement de toutes les donn\u00E9es, finalise la\n  //  * donn\u00E9e cache\n  //  * \n  //  * @param item Entr\u00E9e du dictionnaire\n  //  */\n  // static finalizeCachedItem(item: CacheableItem): void {\n  //   // R\u00E9soudre la cat\u00E9gorie (c'est possible maintenant que toutes les\n  //   // donn\u00E9es sont conn\u00E9es) \n  //   let categorie: string | undefined;\n  //   if (item.categorie_id) {\n  //     const categorieEntry = this.cacheManager.get(item.categorie_id);\n  //     categorie = categorieEntry ? (categorieEntry as CachedEntryData).entree : undefined;\n  //     item.categorie = categorie ; \n  //   } else {\n  //     item.categorie = '-- hors cat\u00E9gorie --' ;\n  //   }\n    \n  //   // Mise en forme de la d\u00E9finition\n  //   item.definition = item.raw_definition ; // TODO \u00E0 mettre en forme\n\n  //   // Mise en forme du genre\n  //   item.genre_formated = this.GENRES[item.genre as keyof typeof this.GENRES] || `# genre ${item.genre} inconnu #`;\n  // }\n  \n  // /**\n  //  * Recherche d'entr\u00E9es par pr\u00E9fixe (optimis\u00E9e)\n  //  * M\u00E9thode sp\u00E9cifique Entry\n  //  */\n  // protected static searchMatchingItems(prefix: string): CachedEntryData[] {\n  //   const prefixLower = StringNormalizer.toLower(prefix);\n  //   const prefixRa = StringNormalizer.rationalize(prefix);\n    \n  //   return this.filter((entry: any) => {\n  //     return entry.entree_min.startsWith(prefixLower) || \n  //            entry.entree_min_ra.startsWith(prefixRa);\n  //   }) as CachedEntryData[];\n  // }\n  \n  // // M\u00E9thodes typ\u00E9es pour plus de confort (optionnel)\n  // static get(id: string): CachedEntryData | null {\n  //   return super.get(id) as CachedEntryData | null;\n  // }\n  \n  // static getAll(): CachedEntryData[] {\n  //   return super.getAll() as CachedEntryData[];\n  // }\n}\n\n// Pour exposer globalement\n(window as any).Entry = Entry ;\n", "import { UniversalDicoElement } from \"./UniversalDicoElement\";\n\nexport class UExemple extends UniversalDicoElement {\n  [key: string]: any;\n\n}", "import '../common';\nimport { UExemple } from '../../bothside/UExemple';\n\nexport class Exemple extends UExemple {\n//   static readonly minName = 'exemple';\n  \n//   // Cache manager sp\u00E9cifique aux exemples\n//   private static _cacheManagerInstance: CacheManager<ExempleData, CachedExempleData> = new CacheManager();\n  \n//   protected static get cacheManager(): CacheManager<ExempleData, CachedExempleData> {\n//     return this._cacheManagerInstance;\n//   }\n  \n//   static readonly ERRORS = {\n//     'no-items': 'Aucun exemple dans la base, bizarrement\u2026',\n//   };\n\n//   static formateProp(prop: string, value: any): string {\n//     return value || '';\n//   }\n\n//   /**\n//    * Finalise la donn\u00E9e pour le cache\n//    */\n//   static finalizeCachedItem(exemple: AnyCachedData): AnyCachedData {\n//     // R\u00E9soudre le titre de l'\u0153uvre\n//     let oeuvreTitle: string | undefined;\n//     if (exemple.oeuvre_id) {\n//       try {\n//         if (Oeuvre.isCacheBuilt) {\n//           const oeuvre = Oeuvre.get(exemple.oeuvre_id);\n//           oeuvreTitle = oeuvre ? oeuvre.titre_affiche : undefined;\n//         }\n//       } catch (error) {\n//         console.warn(`[Exemple] Could not resolve oeuvre ${exemple.oeuvre_id}:`, error);\n//       }\n//     }\n//     exemple.oeuvre_titre = oeuvreTitle ;\n    \n//     // R\u00E9soudre l'entr\u00E9e associ\u00E9e\n//     let entryEntree: string | undefined;\n//     try {\n//       if (Entry.isCacheBuilt) {\n//         const entry = Entry.get(exemple.entry_id);\n//         entryEntree = entry ? entry.entree : undefined;\n//       }\n//     } catch (error) {\n//       console.warn(`[Exemple] Could not resolve entry ${exemple.entry_id}:`, error);\n//     }\n//     exemple.entry_entree = entryEntree ;\n \n//     return exemple;\n//   }\n//   /**\n//    * Pr\u00E9pare un exemple pour le cache de recherche\n//    * SEULE m\u00E9thode sp\u00E9cifique - le reste h\u00E9rite de CommonClassItem !\n//    * \n//    * TODO En fait, il faut une m\u00E9thode en deux temps :\n//    *  - le premier ne fait que mettre les donn\u00E9es de l'item dans\n//    *    la donn\u00E9e cach\u00E9e\n//    *  - le deuxi\u00E8me temps, une fois toutes les donn\u00E9es de tous les\n//    *    types charg\u00E9es, pr\u00E9pare les donn\u00E9es sp\u00E9ciales qui ont besoin\n//    *    des autres types.\n//    */\n//   static prepareItemForCache(exemple: ExempleData): CachedExempleData {\n//     const contentNormalized = StringNormalizer.toLower(exemple.content);\n//     const contentRationalized = StringNormalizer.rationalize(exemple.content);\n   \n//     return {\n//       id: exemple.id,\n//       content: exemple.content,\n//       content_min: contentNormalized,\n//       content_min_ra: contentRationalized,\n//       oeuvre_id: exemple.oeuvre_id,\n//       oeuvre_titre: undefined,\n//       entry_id: exemple.entry_id,\n//       entry_entree: undefined\n//     };\n//   }\n\n//   /**\n//    * Filtrage des exemples \n//    * M\u00E9thode sp\u00E9cifique Exemple\n//    * \n//    * En mode \"normal\"\n//    * Le filtrage, sauf indication contraire, se fait par rapport aux\n//    * titres de film. Le m\u00E9canisme est le suivant : l'user tape un\n//    * d\u00E9but de titres de film. On en d\u00E9duit les titres gr\u00E2ce \u00E0 la\n//    * m\u00E9thode de la classe Oeuvre. On prend l'identifiant et on \n//    * affiche tous les exemples du film voulu.\n//    * \n//    * En mode \"Entr\u00E9e\", l'utilisateur tape une entr\u00E9e du dictionnaire\n//    * et la m\u00E9thode renvoie tous les exemples concernant cette entr\u00E9e.\n//    * \n//    * En mode \"Contenu\", la recherche se fait sur le contenu, partout\n//    * et sur toutes les entr\u00E9es.\n//    * \n//    * QUESTION Comment faire la diff\u00E9rence entre les diff\u00E9rents modes\n//    * de recherche ? peut-\u00EAtre avec un pr\u00E9fix ('content' pour recher-\n//    * che sur le contenu, 'dico:' ou 'entree:' pour la recherche sur \n//    * les entr\u00E9es et rien pour la recherche sur le film)\n//    */\n//   protected static searchMatchingItems(searched: string): CachedExempleData[] {\n//     const searchLower = StringNormalizer.toLower(searched);\n//     const searchRa = StringNormalizer.rationalize(searched);\n//     const mode: string = 'by oeuvre' ; // doit pouvoir \u00EAtre d\u00E9termin\u00E9 depuis searchLower\n\n//     switch (mode) {\n//       case 'by oeuvre':\n//         /*\n//         TODO \u00C7a doit \u00EAtre affin\u00E9 : \n//         - on appelle la m\u00E9thode Oeuvre.searchMatchingItems(searchLower) pour\n//           obtenir les oeuvres possibles\n//         - on boucle sur chaque oeuvre pour obtenir les exemples. On retourne \n//           la liste obtenue.\n//         */\n//         const oeuvreId = 'DITD' ; // \u00E0 d\u00E9terminer en fonction du d\u00E9but cherch\u00E9\n//         return this.getByOeuvre(oeuvreId) as CachedExempleData[];\n//       case 'by entry':\n//         return [] as CachedExempleData[];\n//       case 'by content':\n//         return this.filter((exemple: any) => {\n//           return exemple.content_min.includes(searchLower) ||\n//             exemple.content_min_ra.includes(searchRa);\n//         }) as CachedExempleData[];\n//       default:\n//         return [] ; // ne doit jamais \u00EAtre atteint, juste pour lint\n//     }\n//  }\n\n//   /**\n//    * R\u00E9cup\u00E8re tous les exemples associ\u00E9s \u00E0 une oeuvre\n//    * M\u00E9thode sp\u00E9cifique Exemple\n//    */\n//   static getByOeuvre(oeuvreId: string): CachedExempleData[] {\n//     return this.filter((exemple: any) => exemple.oeuvre_id === oeuvreId) as CachedExempleData[];\n//   }\n\n//   /**\n//    * R\u00E9cup\u00E8re tous les exemples associ\u00E9s \u00E0 une entr\u00E9e\n//    * M\u00E9thode sp\u00E9cifique Exemple\n//    */\n//   static getByEntry(entryId: string): CachedExempleData[] {\n//     return this.filter((exemple: any) => exemple.entry_id === entryId) as CachedExempleData[];\n//   }\n  \n//   // M\u00E9thodes typ\u00E9es pour plus de confort (optionnel)\n//   static get(id: string): CachedExempleData | null {\n//     return super.get(id) as CachedExempleData | null;\n//   }\n  \n//   static getAll(): CachedExempleData[] {\n//     return super.getAll() as CachedExempleData[];\n//   }\n\n//   /**\n//    * Post-traitement apr\u00E8s affichage : ajouter les titres des films\n//    * IMPORTANT: Cette m\u00E9thode est appel\u00E9e apr\u00E8s l'affichage initial\n//    * \n//    * Fonctionnement\n//    * --------------\n//    * Pour optimiser le traitement, en consid\u00E9rant qu'on peut avoir\n//    * des milliers d'exemples, on ne passe pas par le DOM mais par\n//    * les donn\u00E9es (getAll). Puisqu'elles sont relev\u00E9es dans l'ordre,\n//    * c'est-\u00E0-dire par film, il suffit d'ajouter un titre au premier\n//    * exemple qu'on trouve qui a un film diff\u00E9rent du pr\u00E9c\u00E9dent.\n//    * \n//    */\n//   static afterDisplayItems(): boolean {\n//     console.log('[EXEMPLES] afterDisplayItems - Grouping examples by oeuvre');\n    \n//     const mainConteneur = this.container as HTMLElement | null ;\n    \n//     if ( mainConteneur === null ) {\n//       // \u00C7a ne devrait jamais arriver\n//       console.error('[EXEMPLES] No container found for grouping');\n//       return false;\n//     }\n//     // Film courant\n//     let currentOeuvreId = '' ;\n//     this.cacheManager.getAll().forEach(exemple => {\n//       if ( exemple.oeuvre_id === currentOeuvreId ) { return ; }\n//       // Le film change, il faut mettre un titre avant\n//       const domObj = document.querySelector(`main#items > div.item[data-id=\"${exemple.id}\"]`) as HTMLDivElement ;\n//       currentOeuvreId = exemple.oeuvre_id as string ;\n//       const titleObj = document.createElement('h2');\n//       const oeuvre = this.cacheManager.get(exemple.oeuvre_id as string);\n//       console.log(\"oeuvre r\u00E9pondant \u00E0 l'id %s\", currentOeuvreId, oeuvre);\n//       if ( !oeuvre ) {\n//         console.log(\"Oeuvre introuvable, this.cacheManager vaut\", this.cacheManager);\n//         throw new Error(\"L'\u0153uvre devrait \u00EAtre d\u00E9finie.\");\n//       }\n//       const titre = oeuvre ? oeuvre.titre_affiche : \"\u0153uvre introuvable\" ;\n//       console.log(\"Titre\", titre);\n//       titleObj.innerHTML = titre ;\n//        // Ajouter bouton d'ajout d'exemple\n//       const btnAdd = document.createElement('button');\n//       btnAdd.className = 'btn-add';\n//       btnAdd.innerHTML = '<i class=\"codicon codicon-add\"></i>';\n//       btnAdd.setAttribute('data-oeuvre_id', currentOeuvreId);\n//       titleObj.appendChild(btnAdd);\n//       domObj.parentNode?.insertBefore(titleObj, domObj);\n//     });\n//     console.log('[EXEMPLES] Titling completed');\n//     return true;\n//   }\n}\n\n(window as any).Exemple = Exemple;", "// Common TypeScript for all panels\nimport { Entry } from './entries/Entry';\nimport { Oeuvre } from './oeuvres/Oeuvre';\nimport { Exemple } from './exemples/Exemple';\nimport { CommonClassItem, ItemData } from './CommonClassItem';\n\n// Retourne la classe d'element en fonction du panneau\n// P.e. 'entries' => Entry (typeof CommonClassItem)\nfunction ItemClass(panelId: string): typeof CommonClassItem | undefined {\n  switch(panelId) {\n    case 'entries':\n      return Entry;\n    case 'oeuvres':\n      return Oeuvre;\n    case 'exemples':\n      return Exemple;\n  }\n}\n// VSCode API\ninterface VSCodeAPI {\n  postMessage: (msg: any) => void;\n  getState: () => any;\n  setState: (state: any) => void;\n}\ndeclare function acquireVsCodeApi(): VSCodeAPI;\nexport const vscode = acquireVsCodeApi();\n\n// Types pour les messages\ninterface Message {\n  command: string;\n  [key: string]: any;\n}\n\ninterface ElementData {\n  tagName: string;\n  textContent: string;\n  classList: string[];\n  id: string;\n  exists: boolean;\n}\n\n// Syst\u00E8me de messages pour les tests DOM\nwindow.addEventListener('message', (event: MessageEvent<Message>) => {\n  const message = event.data;\n\n  switch (message.command) {\n    case 'queryDOM':\n      queryDOMObject(message);\n      break;\n    case 'queryDOMAll':\n      handleQueryDOMAll(message);\n      break;\n    case 'queryDOMVisible':\n      handleQueryDOMVisible(message);\n      break;\n    case 'typeInElement':\n      handleTypeInElement(message);\n      break;\n    case 'clearAndTypeInElement':\n      handleClearAndTypeInElement(message);\n      break;\n    case 'clearElement':\n      handleClearElement(message);\n      break;\n    case 'getElementFromParent':\n      handleGetElementFromParent(message);\n      break;\n    case 'executeScript':\n      handleExecuteScript(message);\n      break;\n    case 'updateContent':\n      const targetElement = document.querySelector(message.target);\n      if (targetElement) {\n        targetElement.innerHTML = message.content;\n      }\n      break;\n    case 'cacheData':\n      // Mise en cache des donn\u00E9es du type\n      cacheAllData(message.items, message.panelId);\n      break;\n    case 'populate':\n      console.log(`[WEBVIEW] Demande population du panneau ${message.panelId} re\u00E7ue.`);\n      populatePanel(message.panelId);\n      break;\n  }\n});\n\n// Fonction g\u00E9n\u00E9ric pour mettre en cache toutes les donn\u00E9es\nfunction cacheAllData(items: ItemData[], panelId: string): void {\n  (ItemClass(panelId) as typeof CommonClassItem).buildCache(items);\n  vscode.postMessage({ command: 'cache-ready' }); // pour l'instant de sert \u00E0 rien\n}\n\n// Fonction g\u00E9n\u00E9rique pour peupler les panneaux (i.e. afficher les donn\u00E9es)\n// NOTE TODO Pour le moment, +items+ ne sert \u00E0 rien car on devrait r\u00E9cup\u00E9rer\n// les donn\u00E9es du cache de l'\u00E9l\u00E9ment et non pas de la base de donn\u00E9es.\nfunction populatePanel(panelId: string): void {\n  (ItemClass(panelId) as typeof CommonClassItem)\n    .finalizeCachedData()\n    .populatePanel()\n    .observePanel();\n  vscode.postMessage({ command: 'panel-ready' });\n}\n\nfunction queryDOMObject(message: Message): void {\n  const element = document.querySelector(message.selector);\n\n  // Construire un objet simplifi\u00E9 de l'\u00E9l\u00E9ment pour les tests\n  let elementData: ElementData | null = null;\n  if (element) {\n    elementData = {\n      tagName: element.tagName.toLowerCase(),\n      textContent: element.textContent || '',\n      classList: Array.from(element.classList),\n      id: element.id,\n      exists: true\n    };\n  }\n\n  // R\u00E9pondre \u00E0 l'extension\n  vscode.postMessage({\n    command: 'domQueryResult',\n    selector: message.selector,\n    element: elementData\n  });\n}\n\n// Helper function to create element data object\nfunction createElementData(element: Element): ElementData {\n  return {\n    tagName: element.tagName.toLowerCase(),\n    textContent: element.textContent || '',\n    classList: Array.from(element.classList),\n    id: element.id,\n    exists: true\n  };\n}\n\n// Handler for queryDOMAll - returns array of all matching elements\nfunction handleQueryDOMAll(message: Message): void {\n  const elements = document.querySelectorAll(message.params.selector);\n  const elementsData = Array.from(elements).map(createElementData);\n  \n  vscode.postMessage({\n    command: 'queryDOMAllResult',\n    params: message.params,\n    result: elementsData\n  });\n}\n\n// Handler for queryDOMVisible - returns array of visible elements\nfunction handleQueryDOMVisible(message: Message): void {\n  const elements = document.querySelectorAll(message.params.selector);\n  const visibleElements = Array.from(elements).filter(element => {\n    const style = window.getComputedStyle(element);\n    return style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0';\n  });\n  const elementsData = visibleElements.map(createElementData);\n  \n  vscode.postMessage({\n    command: 'queryDOMVisibleResult',\n    params: message.params,\n    result: elementsData\n  });\n}\n\n// Handler for typeInElement - types text in an input element\nfunction handleTypeInElement(message: Message): void {\n  const element = document.querySelector(message.params.selector) as HTMLInputElement | HTMLTextAreaElement;\n  if (element && (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA')) {\n    element.value += message.params.text;\n    // Trigger input event for reactive behavior\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n  }\n  \n  vscode.postMessage({\n    command: 'typeInElementResult',\n    params: message.params,\n    result: null\n  });\n}\n\n// Handler for clearAndTypeInElement - clears then types text\nfunction handleClearAndTypeInElement(message: Message): void {\n  const element = document.querySelector(message.params.selector) as HTMLInputElement | HTMLTextAreaElement;\n  if (element && (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA')) {\n    element.value = message.params.text;\n    // Trigger input event for reactive behavior\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n  }\n  \n  vscode.postMessage({\n    command: 'clearAndTypeInElementResult',\n    params: message.params,\n    result: null\n  });\n}\n\n// Handler for clearElement - clears an input element\nfunction handleClearElement(message: Message): void {\n  const element = document.querySelector(message.params.selector) as HTMLInputElement | HTMLTextAreaElement;\n  if (element && (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA')) {\n    element.value = '';\n    // Trigger input event for reactive behavior\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n  }\n  \n  vscode.postMessage({\n    command: 'clearElementResult',\n    params: message.params,\n    result: null\n  });\n}\n\n// Handler for getElementFromParent - finds element within a parent\nfunction handleGetElementFromParent(message: Message): void {\n  const parentElement = document.getElementById(message.params.parentId);\n  let elementData: ElementData | null = null;\n  \n  if (parentElement) {\n    const element = parentElement.querySelector(message.params.selector);\n    if (element) {\n      elementData = createElementData(element);\n    }\n  }\n  \n  vscode.postMessage({\n    command: 'getElementFromParentResult',\n    params: message.params,\n    result: elementData\n  });\n}\n\n// Handler for executeScript - executes JavaScript code\nfunction handleExecuteScript(message: Message): void {\n  let result: any = null;\n  try {\n    // result = eval(message.params.script);\n    result = (0, eval)(message.params.script);\n  } catch (error) {\n    console.error('Script execution error:', error);\n    result = (error as Error).message;\n  }\n  \n  vscode.postMessage({\n    command: 'executeScriptResult',\n    params: message.params,\n    result: result\n  });\n}\n\n// Fonctions utilitaires communes\nexport function hideElement(selector: string): void {\n  const element = document.querySelector(selector);\n  if (element) {\n    element.classList.add('hidden');\n  }\n}\n\nexport function showElement(selector: string): void {\n  const element = document.querySelector(selector);\n  if (element) {\n    element.classList.remove('hidden');\n  }\n}\n\nexport function toggleElement(selector: string): void {\n  const element = document.querySelector(selector);\n  if (element) {\n    element.classList.toggle('hidden');\n  }\n}\n\n// Gestionnaires d'\u00E9v\u00E9nements communs\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Gestion des touches communes (\u00E0 impl\u00E9menter plus tard)\n  document.addEventListener('keydown', (event) => {\n    // TODO: Gestion du syst\u00E8me Vim-like\n    // f: focus search\n    // j/k: navigation\n    // etc.\n  });\n  \n  // Gestion de la console\n  const consoleInput = document.querySelector('#panel-console') as HTMLInputElement;\n  if (consoleInput) {\n    consoleInput.addEventListener('keydown', (event) => {\n      if (event.key === 'Enter') {\n        const command = consoleInput.value.trim();\n        if (command) {\n          // Envoyer la commande \u00E0 l'extension\n          vscode.postMessage({\n            command: 'console-command',\n            value: command\n          });\n          consoleInput.value = '';\n        }\n      }\n    });\n  }\n});", "import { UniversalDicoElement } from './UniversalDicoElement';\n\nexport class UOeuvre extends UniversalDicoElement {\n  [key: string]: any;\n\n  public titre_affiche: string = '--- titre affich\u00E9 non d\u00E9fini ---' ;\n  constructor( data: {[k:string]:any} ){\n    super(data);\n  }\n}", "import '../common';\nimport { UOeuvre } from '../../bothside/UOeuvre';\n\nexport class Oeuvre extends UOeuvre {\n  static readonly minName = 'oeuvre';\n\n  // private static readonly REG_ARTICLES = /\\b(an|a|the|le|la|les|l'|de|du)\\b/i ;\n  \n  // // Cache manager sp\u00E9cifique aux oeuvres\n  // private static _cacheManagerInstance: CacheManager<OeuvreData, CachedOeuvreData> = new CacheManager();\n  \n  // protected static get cacheManager(): CacheManager<OeuvreData, CachedOeuvreData> {\n  //   return this._cacheManagerInstance;\n  // }\n  // // pour test\n  // static get cacheManagerForced() { return this.cacheManager ; }\n  \n  // static readonly ERRORS = {\n  //   'no-items': 'Aucune \u0153uvre dans la base, bizarrement\u2026',\n  // };\n\n  // static formateProp(prop: string, value: any): string {\n  //   switch(prop) {\n  //     case 'annee':\n  //       return value ? value.toString() : '';\n  //     default: \n  //       return value || '';\n  //   }\n  // }\n\n  // /**\n  //  * Pr\u00E9pare une \u0153uvre pour le cache de recherche\n  //  * SEULE m\u00E9thode sp\u00E9cifique - le reste h\u00E9rite de CommonClassItem !\n  //  */\n  // static prepareItemForCache(oeuvre: OeuvreData): CachedOeuvreData {\n  //   // Cr\u00E9er un array avec tous les titres disponibles\n  //   const titres: string[] = [];\n\n  //   if (oeuvre.titre_francais) {\n  //     titres.push(StringNormalizer.rationalize(oeuvre.titre_francais));\n  //   }\n  //   if (oeuvre.titre_original) {\n  //     titres.push(StringNormalizer.rationalize(oeuvre.titre_original));\n  //   }\n  //   if (oeuvre.titre_affiche) {\n  //     titres.push(StringNormalizer.rationalize(oeuvre.titre_affiche));\n  //   }\n  \n  //   // Il faut supprimer les articles dans les titres\n  //   titres.forEach(titre => {\n  //     if ( titre.match(this.REG_ARTICLES)) {\n  //       titres.push(titre.replace(this.REG_ARTICLES, \"\"));\n  //     }\n  //   });\n\n  //   const uniqTitres: string[] = [];\n  //   titres.forEach(titre => {\n  //     if ( uniqTitres.includes(titre) ) { return ; }\n  //     uniqTitres.push(titre);\n  //   });\n\n  //   // Versions minuscules pour recherche\n  //   const titresLookUp = uniqTitres.map(titre => StringNormalizer.toLower(titre));\n  //   // console.info(\"titres min\", titresLookUp);\n    \n  //   return {\n  //     id: oeuvre.id,\n  //     titre_affiche: oeuvre.titre_affiche,\n  //     titre_original: oeuvre.titre_original,\n  //     titre_francais: oeuvre.titre_francais,\n  //     titres: titres,\n  //     titresLookUp: titresLookUp,\n  //     annee: oeuvre.annee,\n  //     auteurs: oeuvre.auteurs,\n  //     resume: oeuvre.resume\n  //   };\n  // }\n\n  // static finalizeCachedItem(item: CacheableItem): void {\n  //   // rien \u00E0 faire pour le moment, mais il faut que la fonction\n  //   // soit impl\u00E9ment\u00E9e.\n  //   if ( item.titre_affiche !== item.titre_original ) {\n  //     item.titre_affiche_formated = item.titre_affiche;\n  //   }\n  //   if ( item.titre_francais && item.titre_francais !== item.titre_original) {\n  //     item.titre_francais_formated = item.titre_francais;\n  //   }\n\n  //   // Pour le moment, le r\u00E9sum\u00E9 reste le m\u00EAme, mais ensuite il sera\n  //   // possible de le faire en markdown\n  //   item.resume_formated = item.resume;\n\n  //   // Mettre en forme les auteurs\n  //   const regauteurs = /(.+?) ([A-Z \\-]+?)\\(([HF]), (.+?)\\)/ ;\n  //   let auteurs = item.auteurs;\n  //   while (auteurs.match(regauteurs)) {\n  //     auteurs = auteurs.replace(regauteurs, (_: string, prenom: string, nom: string, sexe: string, fonctions: string): string => {\n  //       return `\n  //       <span class=\"prenom\">${prenom}</span>\n  //       <span class=\"nom\">${nom}</span>\n  //       <span class=\"sexe\">${sexe}</span>\n  //       (<span class=\"fonctions\">${fonctions}</span>)\n  //       `;\n  //     });\n  //   }\n  //   item.auteurs_formated = auteurs.trim() ; \n  // }\n\n  // /**\n  //  * Recherche d'\u0153uvres par titre (optimis\u00E9e)\n  //  * M\u00E9thode sp\u00E9cifique Oeuvre\n  //  */\n  // protected static searchMatchingItems(searchTerm: string): CachedOeuvreData[] {\n  //   const searchLower = StringNormalizer.toLower(searchTerm);\n    \n  //   return this.filter((oeuvre: any) => {\n  //     return oeuvre.titresLookUp.some((titre: string) => {\n        \n  //       const res: boolean = titre.startsWith(searchLower);\n  //       console.log(\"Le titre %s r\u00E9pond %s avec %s\", oeuvre.titre_affiche, res, searchLower);\n  //       return res ;\n  //     });\n  //   }) as CachedOeuvreData[];\n  // }\n}\n\n\n(window as any).Oeuvre = Oeuvre ;"],
  "mappings": "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",
  "names": []
}
