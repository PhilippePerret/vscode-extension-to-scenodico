{
  "version": 3,
  "sources": ["../src/webviews/CacheManager.ts", "../src/webviews/CacheTypes.ts", "../src/webviews/CommonClassItem.ts", "../src/webviews/oeuvres/Oeuvre.ts", "../src/webviews/exemples/Exemple.ts", "../src/webviews/common.ts", "../src/webviews/entries/Entry.ts"],
  "sourcesContent": ["import { AnyCachedData } from \"./CacheTypes\";\nimport { vscode } from './common'; \n\nexport interface CacheableItem {\n  id: string;\n  [key: string]: any;\n}\n\n/**\n * Gestionnaire de cache g\u00E9n\u00E9rique utilisant une Map index\u00E9e par ID\n * pour un acc\u00E8s O(1) aux \u00E9l\u00E9ments\n */\nexport class CacheManager<TRaw extends CacheableItem, TCached extends CacheableItem> {\n  private _cache: Map<string, TCached> = new Map();\n  private _isBuilt: boolean = false;\n  protected _isPrepared: boolean = false;\n  \n  public get prepared() {\n    return this._isPrepared === true ; \n  }\n\n prepareCacheWithData(\n    rawData: TRaw[],\n    prepareItemForCacheMethod: (item: TRaw) => TCached,\n    debugName:string\n  ): void {\n    this._cache.clear();\n    rawData.forEach(item => {\n      this._cache.set(item.id, prepareItemForCacheMethod(item));\n    });\n    this._isPrepared = true ;\n    vscode.postMessage({command: 'data-cached'});\n    console.log(`[WEBVIEW] Cache pr\u00E9par\u00E9 pour ${debugName}: ${this._cache.size} \u00E9l\u00E9ments`);\n  }\n  \n  finalizeCachedData(\n    finalizeItemMethod: (item: CacheableItem) => void,\n    debugName: string\n  ): void {\n    this.forEach(item => finalizeItemMethod(item));\n  }\n  // /**\n  //  * Construit le cache \u00E0 partir des donn\u00E9es brutes\n  //  * @param rawData - Donn\u00E9es brutes de la base de donn\u00E9es\n  //  * @param prepareFunction - Fonction de pr\u00E9paration des donn\u00E9es pour le cache\n  //  * @param debugName - Nom pour les logs de debug\n  //  */\n  // buildCache(\n  //   finalizeCachedItemMethod: (item: TCached) => TCached,\n  //   debugName: string\n  // ): void {\n  //   // On boucle sur les donn\u00E9es qui ont \u00E9t\u00E9 mises en cache.\n  //   this._cache.forEach(item => {\n  //     this._cache.set(item.id, finalizeCachedItemMethod(item));\n  //   });\n    \n  //   this._isBuilt = true;\n  //   console.log(`Cache construit pour ${debugName} \u00E9l\u00E9ments`);\n  // }\n\n  /**\n   * R\u00E9cup\u00E8re un \u00E9l\u00E9ment par son ID\n   * @param id - ID de l'\u00E9l\u00E9ment \u00E0 r\u00E9cup\u00E9rer\n   * @returns L'\u00E9l\u00E9ment trouv\u00E9 ou null\n   */\n  get(id: string): TCached | null {\n    return this._cache.get(id) || null;\n  }\n\n  /**\n   * R\u00E9cup\u00E8re tous les \u00E9l\u00E9ments du cache sous forme d'array\n   * @returns Array de tous les \u00E9l\u00E9ments cach\u00E9s\n   */\n  getAll(): TCached[] {\n    return Array.from(this._cache.values());\n  }\n\n  /**\n   * R\u00E9cup\u00E8re toutes les cl\u00E9s (IDs) du cache\n   * @returns Array de tous les IDs\n   */\n  getAllIds(): string[] {\n    return Array.from(this._cache.keys());\n  }\n\n  /**\n   * It\u00E8re sur tous les \u00E9l\u00E9ments du cache\n   * @param callback - Fonction appel\u00E9e pour chaque \u00E9l\u00E9ment\n   */\n  forEach(callback: (item: TCached, id: string) => void): void {\n    this._cache.forEach((item, id) => callback(item, id));\n  }\n\n  /**\n   * Filtre les \u00E9l\u00E9ments du cache\n   * @param predicate - Fonction de filtrage\n   * @returns Array des \u00E9l\u00E9ments qui correspondent au crit\u00E8re\n   */\n  filter(predicate: (item: TCached, id: string) => boolean): TCached[] {\n    const result: TCached[] = [];\n    this._cache.forEach((item, id) => {\n      if (predicate(item, id)) {\n        result.push(item);\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Cherche un \u00E9l\u00E9ment selon un crit\u00E8re\n   * @param predicate - Fonction de recherche\n   * @returns Premier \u00E9l\u00E9ment trouv\u00E9 ou null\n   */\n  find(predicate: (item: TCached, id: string) => boolean): TCached | null {\n    for (const [id, item] of this._cache) {\n      if (predicate(item, id)) {\n        return item;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Vide le cache\n   */\n  clear(): void {\n    this._cache.clear();\n    this._isBuilt = false;\n  }\n\n  /**\n   * V\u00E9rifie si le cache est construit\n   */\n  get isBuilt(): boolean {\n    return this._isBuilt;\n  }\n\n  /**\n   * Retourne la taille du cache\n   */\n  get size(): number {\n    return this._cache.size;\n  }\n\n  /**\n   * V\u00E9rifie si un ID existe dans le cache\n   * @param id - ID \u00E0 v\u00E9rifier\n   */\n  has(id: string): boolean {\n    return this._cache.has(id);\n  }\n}\n", "import { CacheableItem } from './CacheManager';\n\n/**\n * Utilitaire pour normaliser les cha\u00EEnes de caract\u00E8res\n * (suppression des accents, minuscules, etc.)\n */\nexport class StringNormalizer {\n  /**\n   * Normalise une cha\u00EEne en minuscules\n   */\n  static toLower(text: string): string {\n    return text.toLowerCase();\n  }\n\n  /**\n   * Normalise une cha\u00EEne en supprimant les accents et diacritiques\n   * TODO: \u00C0 am\u00E9liorer avec une vraie fonction de normalisation\n   */\n  static rationalize(text: string): string {\n    return text\n      .toLowerCase()\n      .normalize('NFD') // D\u00E9compose les caract\u00E8res accentu\u00E9s\n      .replace(/[\\u0300-\\u036f]/g, '') // Supprime les marques diacritiques\n      .replace(/[^a-zA-Z0-9]/g, '');  // note : si c'\u00E9tait avant la ligne pr\u00E9c\u00E9dente, il n'y aurait pas besoin de la ligne pr\u00E9c\u00E9dente\u2026\n  }\n}\n\n// ============================================================\n// INTERFACES POUR LES DONN\u00C9ES EN CACHE\n// ============================================================\n\n/**\n * Donn\u00E9es d'une entr\u00E9e en cache (optimis\u00E9es pour la recherche)\n */\nexport interface CachedEntryData extends CacheableItem {\n  id: string;\n  entree: string;\n  entree_min: string;              // Version minuscules pour recherche\n  entree_min_ra: string;           // Version rationalis\u00E9e (sans accents) \n  categorie_id?: string;\n  categorie?: string;              // Nom de la cat\u00E9gorie (r\u00E9solu via Entry.get())\n  genre: string;\n  genre_formated?: string;\n}\n\n/**\n * Donn\u00E9es d'une \u0153uvre en cache (optimis\u00E9es pour la recherche)\n */\nexport interface CachedOeuvreData extends CacheableItem {\n  id: string;\n  titre_affiche: string;\n  resume: string;\n  resume_formated?: string;\n  titre_original?: string;\n  titre_francais?: string;\n  titre_affiche_formated?: string;\n  titre_francais_formated?: string;\n  titres: string[];                // Tous les titres combin\u00E9s pour recherche\n  titresLookUp: string[];            // Versions minuscules des titres\n  annee?: number;\n  auteurs?: string;\n  auteurs_formated?: string;\n}\n\n/**\n * Donn\u00E9es d'un exemple en cache (optimis\u00E9es pour la recherche) \n */\nexport interface CachedExempleData extends CacheableItem {\n  id: string;\n  content: string;\n  content_min: string;             // Version minuscules pour recherche\n  content_min_ra: string;          // Version rationalis\u00E9e (sans accents)\n  oeuvre_id?: string;\n  oeuvre_titre?: string;           // Titre de l'oeuvre (r\u00E9solu via Oeuvre.get())\n  entry_id?: string;\n  entry_entree?: string;           // Entr\u00E9e associ\u00E9e (r\u00E9solue via Entry.get())\n}\n\n// ============================================================\n// TYPES D'AIDE POUR LE TYPAGE FORT\n// ============================================================\n\n/**\n * Type union pour tous les types de donn\u00E9es mises en cache\n */\nexport type AnyCachedData = CachedEntryData | CachedOeuvreData | CachedExempleData;\n", "import { CacheManager, CacheableItem } from './CacheManager';\nimport { AnyCachedData, CachedExempleData } from './CacheTypes';\n\nexport interface ItemData extends CacheableItem {\n  id: string;\n  [key: string]: any;\n}\n\nexport abstract class CommonClassItem {\n  private static _container: HTMLElement | null = null;\n  private static _template: HTMLTemplateElement | null = null;\n\n  // Propri\u00E9t\u00E9s qui doivent \u00EAtre d\u00E9finies par les classes filles\n  static readonly minName: string;\n  static readonly ERRORS: { [key: string]: string };\n\n  // Cache manager - chaque classe fille doit fournir sa propre instance\n  protected static get cacheManager(): CacheManager<any, any> {\n    throw new Error('cacheManager getter must be implemented by subclass');\n  }\n  // Pour tester\n  static get cacheIsInitied(): boolean {\n    return this.cacheManager.prepared === true ;\n  }\n \n  static get container(): HTMLElement | null {\n    return this._container || (this._container = document.querySelector('main#items'));\n  }\n\n  static get template(): HTMLTemplateElement | null {\n    return this._template || (this._template = document.querySelector('template#item-template'));\n  }\n\n  static error(errorId: string): string {\n    // Cette propri\u00E9t\u00E9 doit \u00EAtre d\u00E9finie par chaque classe fille\n    const errors = (this as any).ERRORS;\n    return errors?.[errorId] || `Unknown error: ${errorId}`;\n  }\n\n  /**\n   * Formate une propri\u00E9t\u00E9 pour l'affichage\n   * DOIT \u00EAtre surcharg\u00E9e par chaque classe fille\n   */\n  static formateProp(prop: string, value: any): string {\n    throw new Error('formateProp must be implemented by subclass');\n  }\n\n  /**\n   * Pr\u00E9pare un item pour le cache de recherche\n   * DOIT \u00EAtre surcharg\u00E9e par chaque classe fille\n   */\n  static prepareItemForCache(item: ItemData): any {\n    throw new Error('prepareItemForCache must be implemented by subclass');\n  }\n  // Doit \u00EAtre \u00E9cras\u00E9 par chaque classe d'\u00E9l\u00E9ment\n  static finalizeCachedItem(item: CacheableItem): void {\n    throw new Error(`finalizeCachedItem doit \u00EAtre impl\u00E9ment\u00E9 par chaque \u00E9l\u00E9ment`);\n  }\n  // Doit \u00EAtre \u00E9cras\u00E9 par chaque classe fille (il semble que je doive\n  // faire comme \u00E7a pour ne pas avoir d'erreur d'absence de m\u00E9thode)\n  protected static searchMatchingItems(searched: string): AnyCachedData[]{\n    throw new Error(`La m\u00E9thode searchMatchingItems doit \u00EAtre impl\u00E9ment\u00E9e par la classe ${this.name}`);\n  }\n\n  /**\n   * Construit le cache \u00E0 partir des donn\u00E9es en base de donn\u00E9es\n   * Dans un premier temps, les donn\u00E9es sont mises telle quelles\n   * Puis, une fois qu'elles seront toutes charg\u00E9es (pour tous les\n   * \u00E9l\u00E9ments) on pourra pr\u00E9parer chaque item.\n   */\n  static buildCache(bddData: ItemData[]): void {\n    try {\n      this.cacheManager.prepareCacheWithData(\n        bddData,\n        (item) => this.prepareItemForCache(item),\n        (this as any).minName\n      );\n    } catch (error) {\n      console.error(`[WEBVIEW ${this.name}] Cache build failed:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Finalise les donn\u00E9es mises en cache, maintenant qu'elles ont \u00E9t\u00E9\n   * charg\u00E9es pour tous les \u00E9l\u00E9ments\n   */\n  public static finalizeCachedData(): typeof CommonClassItem {\n    try {\n      this.cacheManager.finalizeCachedData(\n        (item) => this.finalizeCachedItem(item),\n        (this as any).minName\n      );\n    } catch (error) {\n      console.error(`[WEBVIEW ${this.name}] Finalisation cached data failed:`, error);\n    }\n    return this; // pour le chainage\n  }\n  /**\n   * Peuple le panneau de l'\u00E9l\u00E9ment avec les donn\u00E9es mises en cache\n   */\n  public static populatePanel(): typeof CommonClassItem {\n    const container = this.container as HTMLDivElement;\n    container.innerHTML = '';\n    const items = this.getAll();\n    if (items.length === 0) {\n      container.innerHTML = `<div class=\"no-${this.minName}\">${this.error('no-items')}</div>`;\n      return this;\n    }\n    items.forEach((item, index) => {\n      // Clone the template\n      const clone = this.template!.content.cloneNode(true) as DocumentFragment;\n\n      // Set the id and index attributes on the main element\n      const mainElement = clone.querySelector('.' + this.minName);\n      if (mainElement) {\n        if (item.id) {\n          mainElement.setAttribute('data-id', item.id);\n        }\n        mainElement.setAttribute('data-index', index.toString());\n      }\n\n      // Populate all elements with data-prop attributes\n      Object.keys(item).forEach(prop => {\n        const elements = clone.querySelectorAll(`[data-prop=\"${prop}\"]`);\n        elements.forEach(element => {\n          if ( item[prop].startsWith('<') ) {\n            element.innerHTML = item[prop];\n          } else {\n            element.textContent = item[prop];\n          }\n        });\n      });\n\n      // Append to container\n      container!.appendChild(clone);\n    });\n\n    // Call afterDisplayItems for specific panel types with correct context\n    this.afterDisplayItems();\n\n    return this; // pour le chainage\n  }\n\n\n  /**\n   * M\u00E9thode qui observe le panneau, \u00E0 commencer par la captation des\n   * touches et le champ de recherche/filtrage\n   * TODO Mettre un picto filtrage devant le champ\n   * \n   */\n  public static observePanel(): typeof CommonClassItem {\n    const searchInput = document.querySelector('#search-input') as HTMLInputElement;\n    // Pour conserver l'\u00E9tat de chaque d\u00E9finition\n    // TODO Voir si on ne peut pas tout simplement mettre la propri\u00E9t\u00E9\n    // displayed et selected dans la donn\u00E9e en cache.\n    const DomItemsState: Record<string, string> = {};\n    // Par d\u00E9faut, les d\u00E9finitions sont toujours affich\u00E9es\n    this.forEach(item => DomItemsState[item.id] = 'block');\n\n    // Fonction de filtrage\n    const filterEntries = () => {\n      const searchTerm = searchInput.value.trim();\n      const allItems = this.getAll();\n      const allCount = allItems.length;\n      console.log(`[SEARCH ENTRY] Filtering with term: \"${searchTerm}\", total entries: ${allCount}`);\n      const matchingItems: AnyCachedData[] = this.searchMatchingItems(searchTerm);\n      const matchingCount = matchingItems.length;\n      console.log('[SEARCH ENTRY] Cache search found %i matches / %i', matchingCount, allCount);\n      // TODO On pourrait directement renvoyer ce Set par searchByPrefix\n      const matchingIds = new Set(matchingItems.map(item => item.id));\n\n      allItems.forEach(item => {\n        const display: string = matchingIds.has(item.id) ? 'block' : 'none';\n        // [SEARCH item] Etat pour %s : actual: %s, nouveau %s\", item.id, DomItemsState[item.id]);\n        if (DomItemsState[item.id] !== display) {\n          // Seulement quand l'\u00E9tat de l'\u00E9l\u00E9ment a chang\u00E9\n          const domObj = document.querySelector(`main#items > div.item[data-id=\"${item.id}\"]`) as HTMLDivElement;\n          domObj.style.display = display;\n          DomItemsState[item.id] = display;\n        }\n      });\n      // TODO\n      // D\u00E9selectionner l'\u00E9l\u00E9ment courant (si ce n'est pas le m\u00EAme) et s\u00E9lectionner le premier \u00E9l\u00E9ment\n      // affich\u00E9.\n      console.log(`[SEARCH ${this.minName}] Result:  %i shown, %i hidden`, matchingCount, allCount - matchingCount);\n    };\n\n    // \u00C9couter les \u00E9v\u00E9nements de saisie\n    searchInput.addEventListener('input', filterEntries);\n    searchInput.addEventListener('keyup', filterEntries);\n\n    return this; // pour le chainage\n  }\n  /**\n   * R\u00E9cup\u00E8re un \u00E9l\u00E9ment par son ID\n   * @param id - ID de l'\u00E9l\u00E9ment \u00E0 r\u00E9cup\u00E9rer\n   */\n  static get(id: string): AnyCachedData | null {\n    if (this.cacheManager.isBuilt === true) {\n      console.info(\"cache manager des oeuvre\", this.cacheManager);\n      throw new Error(\"Pour s'arr\u00EAter l\u00E0\");\n    }\n    return this.cacheManager.get(id);\n  }\n\n  /**\n   * R\u00E9cup\u00E8re tous les \u00E9l\u00E9ments du cache\n   */\n  static getAll(): AnyCachedData[] {\n    return this.cacheManager.getAll();\n  }\n\n  /**\n   * It\u00E8re sur tous les \u00E9l\u00E9ments du cache\n   * @param callback - Fonction appel\u00E9e pour chaque \u00E9l\u00E9ment\n   */\n  static forEach(callback: (item: AnyCachedData, id: string) => void): void {\n    this.cacheManager.forEach(callback);\n  }\n\n  /**\n   * Filtre les \u00E9l\u00E9ments du cache\n   * @param predicate - Fonction de filtrage\n   */\n  static filter(predicate: (item: AnyCachedData, id: string) => boolean): AnyCachedData[] {\n    return this.cacheManager.filter(predicate);\n  }\n\n  /**\n   * Efface le cache\n   */\n  static clearCache(): void {\n    this.cacheManager.clear();\n  }\n\n  /**\n   * V\u00E9rifie si le cache est construit\n   */\n  static get isCacheBuilt(): boolean {\n    return this.cacheManager.isBuilt;\n  }\n\n  /**\n   * Retourne la taille du cache\n   */\n  static get cacheSize(): number {\n    return this.cacheManager.size;\n  }\n\n  /**\n   * R\u00E9cup\u00E8re le cache (pour compatibilit\u00E9 avec les tests existants)\n   * @deprecated Utiliser les nouvelles m\u00E9thodes get(), getAll(), etc.\n   */\n  static get searchCache(): AnyCachedData[] | null {\n    const manager = this.cacheManager;\n    return manager.isBuilt ? manager.getAll() : null;\n  }\n\n  /**\n   * Post-traitement apr\u00E8s affichage des \u00E9l\u00E9ments\n   * Doit \u00EAtre surclass\u00E9 par les m\u00E9thodes propres aux diff\u00E9rents panneaux\n   */\n  static afterDisplayItems(): boolean {\n    return true;\n  }\n}\n", "import '../common';\nimport { CacheableItem, CacheManager } from '../CacheManager';\nimport { CachedOeuvreData, StringNormalizer } from '../CacheTypes';\nimport { CommonClassItem, ItemData } from '../CommonClassItem';\n\nexport interface OeuvreData extends ItemData {\n  titre_affiche: string;\n  titre_original?: string;\n  titre_francais?: string;\n  annee?: number;\n  auteurs?: string;\n}\n\nexport class Oeuvre extends CommonClassItem {\n  static readonly minName = 'oeuvre';\n\n  private static readonly REG_ARTICLES = /\\b(an|a|the|le|la|les|l'|de|du)\\b/i ;\n  \n  // Cache manager sp\u00E9cifique aux oeuvres\n  private static _cacheManagerInstance: CacheManager<OeuvreData, CachedOeuvreData> = new CacheManager();\n  \n  protected static get cacheManager(): CacheManager<OeuvreData, CachedOeuvreData> {\n    return this._cacheManagerInstance;\n  }\n  // pour test\n  static get cacheManagerForced() { return this.cacheManager ; }\n  \n  static readonly ERRORS = {\n    'no-items': 'Aucune \u0153uvre dans la base, bizarrement\u2026',\n  };\n\n  static formateProp(prop: string, value: any): string {\n    switch(prop) {\n      case 'annee':\n        return value ? value.toString() : '';\n      default: \n        return value || '';\n    }\n  }\n\n  /**\n   * Pr\u00E9pare une \u0153uvre pour le cache de recherche\n   * SEULE m\u00E9thode sp\u00E9cifique - le reste h\u00E9rite de CommonClassItem !\n   */\n  static prepareItemForCache(oeuvre: OeuvreData): CachedOeuvreData {\n    // Cr\u00E9er un array avec tous les titres disponibles\n    const titres: string[] = [];\n\n    if (oeuvre.titre_francais) {\n      titres.push(StringNormalizer.rationalize(oeuvre.titre_francais));\n    }\n    if (oeuvre.titre_original) {\n      titres.push(StringNormalizer.rationalize(oeuvre.titre_original));\n    }\n    if (oeuvre.titre_affiche) {\n      titres.push(StringNormalizer.rationalize(oeuvre.titre_affiche));\n    }\n  \n    // Il faut supprimer les articles dans les titres\n    titres.forEach(titre => {\n      if ( titre.match(this.REG_ARTICLES)) {\n        titres.push(titre.replace(this.REG_ARTICLES, \"\"));\n      }\n    });\n\n    const uniqTitres: string[] = [];\n    titres.forEach(titre => {\n      if ( uniqTitres.includes(titre) ) { return ; }\n      uniqTitres.push(titre);\n    });\n\n    // Versions minuscules pour recherche\n    const titresLookUp = uniqTitres.map(titre => StringNormalizer.toLower(titre));\n    // console.info(\"titres min\", titresLookUp);\n    \n    return {\n      id: oeuvre.id,\n      titre_affiche: oeuvre.titre_affiche,\n      titre_original: oeuvre.titre_original,\n      titre_francais: oeuvre.titre_francais,\n      titres: titres,\n      titresLookUp: titresLookUp,\n      annee: oeuvre.annee,\n      auteurs: oeuvre.auteurs,\n      resume: oeuvre.resume\n    };\n  }\n\n  static finalizeCachedItem(item: CacheableItem): void {\n    // rien \u00E0 faire pour le moment, mais il faut que la fonction\n    // soit impl\u00E9ment\u00E9e.\n    if ( item.titre_affiche !== item.titre_original ) {\n      item.titre_affiche_formated = item.titre_affiche;\n    }\n    if ( item.titre_francais && item.titre_francais !== item.titre_original) {\n      item.titre_francais_formated = item.titre_francais;\n    }\n\n    // Pour le moment, le r\u00E9sum\u00E9 reste le m\u00EAme, mais ensuite il sera\n    // possible de le faire en markdown\n    item.resume_formated = item.resume;\n\n    // Mettre en forme les auteurs\n    const regauteurs = /(.+?) ([A-Z \\-]+?)\\(([HF]), (.+?)\\)/ ;\n    let auteurs = item.auteurs;\n    while (auteurs.match(regauteurs)) {\n      auteurs = auteurs.replace(regauteurs, (_: string, prenom: string, nom: string, sexe: string, fonctions: string): string => {\n        return `\n        <span class=\"prenom\">${prenom}</span>\n        <span class=\"nom\">${nom}</span>\n        <span class=\"sexe\">${sexe}</span>\n        (<span class=\"fonctions\">${fonctions}</span>)\n        `;\n      });\n    }\n    item.auteurs_formated = auteurs.trim() ; \n  }\n\n  /**\n   * Recherche d'\u0153uvres par titre (optimis\u00E9e)\n   * M\u00E9thode sp\u00E9cifique Oeuvre\n   */\n  protected static searchMatchingItems(searchTerm: string): CachedOeuvreData[] {\n    const searchLower = StringNormalizer.toLower(searchTerm);\n    \n    return this.filter((oeuvre: any) => {\n      return oeuvre.titresLookUp.some((titre: string) => {\n        \n        const res: boolean = titre.startsWith(searchLower);\n        console.log(\"Le titre %s r\u00E9pond %s avec %s\", oeuvre.titre_affiche, res, searchLower);\n        return res ;\n      });\n    }) as CachedOeuvreData[];\n  }\n}\n\n\n(window as any).Oeuvre = Oeuvre ;", "import '../common'; \nimport { CommonClassItem, ItemData } from '../CommonClassItem';\nimport { AnyCachedData, CachedExempleData, StringNormalizer } from '../CacheTypes';\nimport { CacheManager } from '../CacheManager';\nimport { Oeuvre } from '../oeuvres/Oeuvre';\nimport { Entry } from '../entries/Entry';\n\nexport interface ExempleData extends ItemData {\n  content: string;\n  oeuvre_id: string;\n  entry_id: string;\n}\n\nexport class Exemple extends CommonClassItem {\n  static readonly minName = 'exemple';\n  \n  // Cache manager sp\u00E9cifique aux exemples\n  private static _cacheManagerInstance: CacheManager<ExempleData, CachedExempleData> = new CacheManager();\n  \n  protected static get cacheManager(): CacheManager<ExempleData, CachedExempleData> {\n    return this._cacheManagerInstance;\n  }\n  \n  static readonly ERRORS = {\n    'no-items': 'Aucun exemple dans la base, bizarrement\u2026',\n  };\n\n  static formateProp(prop: string, value: any): string {\n    return value || '';\n  }\n\n  /**\n   * Finalise la donn\u00E9e pour le cache\n   */\n  static finalizeCachedItem(exemple: AnyCachedData): AnyCachedData {\n    // R\u00E9soudre le titre de l'\u0153uvre\n    let oeuvreTitle: string | undefined;\n    if (exemple.oeuvre_id) {\n      try {\n        if (Oeuvre.isCacheBuilt) {\n          const oeuvre = Oeuvre.get(exemple.oeuvre_id);\n          oeuvreTitle = oeuvre ? oeuvre.titre_affiche : undefined;\n        }\n      } catch (error) {\n        console.warn(`[Exemple] Could not resolve oeuvre ${exemple.oeuvre_id}:`, error);\n      }\n    }\n    exemple.oeuvre_titre = oeuvreTitle ;\n    \n    // R\u00E9soudre l'entr\u00E9e associ\u00E9e\n    let entryEntree: string | undefined;\n    try {\n      if (Entry.isCacheBuilt) {\n        const entry = Entry.get(exemple.entry_id);\n        entryEntree = entry ? entry.entree : undefined;\n      }\n    } catch (error) {\n      console.warn(`[Exemple] Could not resolve entry ${exemple.entry_id}:`, error);\n    }\n    exemple.entry_entree = entryEntree ;\n \n    return exemple;\n  }\n  /**\n   * Pr\u00E9pare un exemple pour le cache de recherche\n   * SEULE m\u00E9thode sp\u00E9cifique - le reste h\u00E9rite de CommonClassItem !\n   * \n   * TODO En fait, il faut une m\u00E9thode en deux temps :\n   *  - le premier ne fait que mettre les donn\u00E9es de l'item dans\n   *    la donn\u00E9e cach\u00E9e\n   *  - le deuxi\u00E8me temps, une fois toutes les donn\u00E9es de tous les\n   *    types charg\u00E9es, pr\u00E9pare les donn\u00E9es sp\u00E9ciales qui ont besoin\n   *    des autres types.\n   */\n  static prepareItemForCache(exemple: ExempleData): CachedExempleData {\n    const contentNormalized = StringNormalizer.toLower(exemple.content);\n    const contentRationalized = StringNormalizer.rationalize(exemple.content);\n   \n    return {\n      id: exemple.id,\n      content: exemple.content,\n      content_min: contentNormalized,\n      content_min_ra: contentRationalized,\n      oeuvre_id: exemple.oeuvre_id,\n      oeuvre_titre: undefined,\n      entry_id: exemple.entry_id,\n      entry_entree: undefined\n    };\n  }\n\n  /**\n   * Filtrage des exemples \n   * M\u00E9thode sp\u00E9cifique Exemple\n   * \n   * En mode \"normal\"\n   * Le filtrage, sauf indication contraire, se fait par rapport aux\n   * titres de film. Le m\u00E9canisme est le suivant : l'user tape un\n   * d\u00E9but de titres de film. On en d\u00E9duit les titres gr\u00E2ce \u00E0 la\n   * m\u00E9thode de la classe Oeuvre. On prend l'identifiant et on \n   * affiche tous les exemples du film voulu.\n   * \n   * En mode \"Entr\u00E9e\", l'utilisateur tape une entr\u00E9e du dictionnaire\n   * et la m\u00E9thode renvoie tous les exemples concernant cette entr\u00E9e.\n   * \n   * En mode \"Contenu\", la recherche se fait sur le contenu, partout\n   * et sur toutes les entr\u00E9es.\n   * \n   * QUESTION Comment faire la diff\u00E9rence entre les diff\u00E9rents modes\n   * de recherche ? peut-\u00EAtre avec un pr\u00E9fix ('content' pour recher-\n   * che sur le contenu, 'dico:' ou 'entree:' pour la recherche sur \n   * les entr\u00E9es et rien pour la recherche sur le film)\n   */\n  protected static searchMatchingItems(searched: string): CachedExempleData[] {\n    const searchLower = StringNormalizer.toLower(searched);\n    const searchRa = StringNormalizer.rationalize(searched);\n    const mode: string = 'by oeuvre' ; // doit pouvoir \u00EAtre d\u00E9termin\u00E9 depuis searchLower\n\n    switch (mode) {\n      case 'by oeuvre':\n        /*\n        TODO \u00C7a doit \u00EAtre affin\u00E9 : \n        - on appelle la m\u00E9thode Oeuvre.searchMatchingItems(searchLower) pour\n          obtenir les oeuvres possibles\n        - on boucle sur chaque oeuvre pour obtenir les exemples. On retourne \n          la liste obtenue.\n        */\n        const oeuvreId = 'DITD' ; // \u00E0 d\u00E9terminer en fonction du d\u00E9but cherch\u00E9\n        return this.getByOeuvre(oeuvreId) as CachedExempleData[];\n      case 'by entry':\n        return [] as CachedExempleData[];\n      case 'by content':\n        return this.filter((exemple: any) => {\n          return exemple.content_min.includes(searchLower) ||\n            exemple.content_min_ra.includes(searchRa);\n        }) as CachedExempleData[];\n      default:\n        return [] ; // ne doit jamais \u00EAtre atteint, juste pour lint\n    }\n }\n\n  /**\n   * R\u00E9cup\u00E8re tous les exemples associ\u00E9s \u00E0 une oeuvre\n   * M\u00E9thode sp\u00E9cifique Exemple\n   */\n  static getByOeuvre(oeuvreId: string): CachedExempleData[] {\n    return this.filter((exemple: any) => exemple.oeuvre_id === oeuvreId) as CachedExempleData[];\n  }\n\n  /**\n   * R\u00E9cup\u00E8re tous les exemples associ\u00E9s \u00E0 une entr\u00E9e\n   * M\u00E9thode sp\u00E9cifique Exemple\n   */\n  static getByEntry(entryId: string): CachedExempleData[] {\n    return this.filter((exemple: any) => exemple.entry_id === entryId) as CachedExempleData[];\n  }\n  \n  // M\u00E9thodes typ\u00E9es pour plus de confort (optionnel)\n  static get(id: string): CachedExempleData | null {\n    return super.get(id) as CachedExempleData | null;\n  }\n  \n  static getAll(): CachedExempleData[] {\n    return super.getAll() as CachedExempleData[];\n  }\n\n  /**\n   * Post-traitement apr\u00E8s affichage : ajouter les titres des films\n   * IMPORTANT: Cette m\u00E9thode est appel\u00E9e apr\u00E8s l'affichage initial\n   * \n   * Fonctionnement\n   * --------------\n   * Pour optimiser le traitement, en consid\u00E9rant qu'on peut avoir\n   * des milliers d'exemples, on ne passe pas par le DOM mais par\n   * les donn\u00E9es (getAll). Puisqu'elles sont relev\u00E9es dans l'ordre,\n   * c'est-\u00E0-dire par film, il suffit d'ajouter un titre au premier\n   * exemple qu'on trouve qui a un film diff\u00E9rent du pr\u00E9c\u00E9dent.\n   * \n   */\n  static afterDisplayItems(): boolean {\n    console.log('[EXEMPLES] afterDisplayItems - Grouping examples by oeuvre');\n    \n    const mainConteneur = this.container as HTMLElement | null ;\n    \n    if ( mainConteneur === null ) {\n      // \u00C7a ne devrait jamais arriver\n      console.error('[EXEMPLES] No container found for grouping');\n      return false;\n    }\n    // Film courant\n    let currentOeuvreId = '' ;\n    Exemple.getAll().forEach(exemple => {\n      if ( exemple.oeuvre_id === currentOeuvreId ) { return ; }\n      // Le film change, il faut mettre un titre avant\n      const domObj = document.querySelector(`main#items > div.item[data-id=\"${exemple.id}\"]`) as HTMLDivElement ;\n      currentOeuvreId = exemple.oeuvre_id as string ;\n      const titleObj = document.createElement('h2');\n      const oeuvre = Oeuvre.get(currentOeuvreId) ;\n      if ( !oeuvre ) {\n        console.log(\"Oeuvre introuvable, Oeuvre.cacheManager vaut\", Oeuvre.cacheManagerForced);\n        throw new Error(\"L'\u0153uvre devrait \u00EAtre d\u00E9finie.\");\n      }\n      console.log(\"oeuvre r\u00E9pondant \u00E0 l'id %s\", currentOeuvreId, oeuvre);\n      const titre = oeuvre ? oeuvre.titre_affiche : \"\u0153uvre introuvable\" ;\n      console.log(\"Titre\", titre);\n      titleObj.innerHTML = titre ;\n       // Ajouter bouton d'ajout d'exemple\n      const btnAdd = document.createElement('button');\n      btnAdd.className = 'btn-add';\n      btnAdd.innerHTML = '<i class=\"codicon codicon-add\"></i>';\n      btnAdd.setAttribute('data-oeuvre_id', currentOeuvreId);\n      titleObj.appendChild(btnAdd);\n      domObj.parentNode?.insertBefore(titleObj, domObj);\n    });\n    console.log('[EXEMPLES] Titling completed');\n    return true;\n  }\n}\n\n(window as any).Exemple = Exemple ;", "// Common TypeScript for all panels\nimport { Entry } from './entries/Entry';\nimport { Oeuvre } from './oeuvres/Oeuvre';\nimport { Exemple } from './exemples/Exemple';\nimport { CommonClassItem, ItemData } from './CommonClassItem';\n\n// Retourne la classe d'element en fonction du panneau\n// P.e. 'entries' => Entry (typeof CommonClassItem)\nfunction ItemClass(panelId: string): typeof CommonClassItem | undefined {\n  switch(panelId) {\n    case 'entries':\n      return Entry;\n    case 'oeuvres':\n      return Oeuvre;\n    case 'exemples':\n      return Exemple;\n  }\n}\n// VSCode API\ninterface VSCodeAPI {\n  postMessage: (msg: any) => void;\n  getState: () => any;\n  setState: (state: any) => void;\n}\ndeclare function acquireVsCodeApi(): VSCodeAPI;\nexport const vscode = acquireVsCodeApi();\n\n// Types pour les messages\ninterface Message {\n  command: string;\n  [key: string]: any;\n}\n\ninterface ElementData {\n  tagName: string;\n  textContent: string;\n  classList: string[];\n  id: string;\n  exists: boolean;\n}\n\n// Syst\u00E8me de messages pour les tests DOM\nwindow.addEventListener('message', (event: MessageEvent<Message>) => {\n  const message = event.data;\n\n  switch (message.command) {\n    case 'queryDOM':\n      queryDOMObject(message);\n      break;\n    case 'queryDOMAll':\n      handleQueryDOMAll(message);\n      break;\n    case 'queryDOMVisible':\n      handleQueryDOMVisible(message);\n      break;\n    case 'typeInElement':\n      handleTypeInElement(message);\n      break;\n    case 'clearAndTypeInElement':\n      handleClearAndTypeInElement(message);\n      break;\n    case 'clearElement':\n      handleClearElement(message);\n      break;\n    case 'getElementFromParent':\n      handleGetElementFromParent(message);\n      break;\n    case 'executeScript':\n      handleExecuteScript(message);\n      break;\n    case 'updateContent':\n      const targetElement = document.querySelector(message.target);\n      if (targetElement) {\n        targetElement.innerHTML = message.content;\n      }\n      break;\n    case 'cacheData':\n      // Mise en cache des donn\u00E9es du type\n      cacheAllData(message.items, message.panelId);\n      break;\n    case 'populate':\n      console.log(`[WEBVIEW] Demande population du panneau ${message.panelId} re\u00E7ue.`);\n      populatePanel(message.panelId);\n      break;\n  }\n});\n\n// Fonction g\u00E9n\u00E9ric pour mettre en cache toutes les donn\u00E9es\nfunction cacheAllData(items: ItemData[], panelId: string): void {\n  (ItemClass(panelId) as typeof CommonClassItem).buildCache(items);\n  vscode.postMessage({ command: 'cache-ready' }); // pour l'instant de sert \u00E0 rien\n}\n\n// Fonction g\u00E9n\u00E9rique pour peupler les panneaux (i.e. afficher les donn\u00E9es)\n// NOTE TODO Pour le moment, +items+ ne sert \u00E0 rien car on devrait r\u00E9cup\u00E9rer\n// les donn\u00E9es du cache de l'\u00E9l\u00E9ment et non pas de la base de donn\u00E9es.\nfunction populatePanel(panelId: string): void {\n  (ItemClass(panelId) as typeof CommonClassItem)\n    .finalizeCachedData()\n    .populatePanel()\n    .observePanel();\n  vscode.postMessage({ command: 'panel-ready' });\n}\n\nfunction queryDOMObject(message: Message): void {\n  const element = document.querySelector(message.selector);\n\n  // Construire un objet simplifi\u00E9 de l'\u00E9l\u00E9ment pour les tests\n  let elementData: ElementData | null = null;\n  if (element) {\n    elementData = {\n      tagName: element.tagName.toLowerCase(),\n      textContent: element.textContent || '',\n      classList: Array.from(element.classList),\n      id: element.id,\n      exists: true\n    };\n  }\n\n  // R\u00E9pondre \u00E0 l'extension\n  vscode.postMessage({\n    command: 'domQueryResult',\n    selector: message.selector,\n    element: elementData\n  });\n}\n\n// Helper function to create element data object\nfunction createElementData(element: Element): ElementData {\n  return {\n    tagName: element.tagName.toLowerCase(),\n    textContent: element.textContent || '',\n    classList: Array.from(element.classList),\n    id: element.id,\n    exists: true\n  };\n}\n\n// Handler for queryDOMAll - returns array of all matching elements\nfunction handleQueryDOMAll(message: Message): void {\n  const elements = document.querySelectorAll(message.params.selector);\n  const elementsData = Array.from(elements).map(createElementData);\n  \n  vscode.postMessage({\n    command: 'queryDOMAllResult',\n    params: message.params,\n    result: elementsData\n  });\n}\n\n// Handler for queryDOMVisible - returns array of visible elements\nfunction handleQueryDOMVisible(message: Message): void {\n  const elements = document.querySelectorAll(message.params.selector);\n  const visibleElements = Array.from(elements).filter(element => {\n    const style = window.getComputedStyle(element);\n    return style.display !== 'none' && style.visibility !== 'hidden' && style.opacity !== '0';\n  });\n  const elementsData = visibleElements.map(createElementData);\n  \n  vscode.postMessage({\n    command: 'queryDOMVisibleResult',\n    params: message.params,\n    result: elementsData\n  });\n}\n\n// Handler for typeInElement - types text in an input element\nfunction handleTypeInElement(message: Message): void {\n  const element = document.querySelector(message.params.selector) as HTMLInputElement | HTMLTextAreaElement;\n  if (element && (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA')) {\n    element.value += message.params.text;\n    // Trigger input event for reactive behavior\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n  }\n  \n  vscode.postMessage({\n    command: 'typeInElementResult',\n    params: message.params,\n    result: null\n  });\n}\n\n// Handler for clearAndTypeInElement - clears then types text\nfunction handleClearAndTypeInElement(message: Message): void {\n  const element = document.querySelector(message.params.selector) as HTMLInputElement | HTMLTextAreaElement;\n  if (element && (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA')) {\n    element.value = message.params.text;\n    // Trigger input event for reactive behavior\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n  }\n  \n  vscode.postMessage({\n    command: 'clearAndTypeInElementResult',\n    params: message.params,\n    result: null\n  });\n}\n\n// Handler for clearElement - clears an input element\nfunction handleClearElement(message: Message): void {\n  const element = document.querySelector(message.params.selector) as HTMLInputElement | HTMLTextAreaElement;\n  if (element && (element.tagName === 'INPUT' || element.tagName === 'TEXTAREA')) {\n    element.value = '';\n    // Trigger input event for reactive behavior\n    element.dispatchEvent(new Event('input', { bubbles: true }));\n  }\n  \n  vscode.postMessage({\n    command: 'clearElementResult',\n    params: message.params,\n    result: null\n  });\n}\n\n// Handler for getElementFromParent - finds element within a parent\nfunction handleGetElementFromParent(message: Message): void {\n  const parentElement = document.getElementById(message.params.parentId);\n  let elementData: ElementData | null = null;\n  \n  if (parentElement) {\n    const element = parentElement.querySelector(message.params.selector);\n    if (element) {\n      elementData = createElementData(element);\n    }\n  }\n  \n  vscode.postMessage({\n    command: 'getElementFromParentResult',\n    params: message.params,\n    result: elementData\n  });\n}\n\n// Handler for executeScript - executes JavaScript code\nfunction handleExecuteScript(message: Message): void {\n  let result: any = null;\n  try {\n    // result = eval(message.params.script);\n    result = (0, eval)(message.params.script);\n  } catch (error) {\n    console.error('Script execution error:', error);\n    result = (error as Error).message;\n  }\n  \n  vscode.postMessage({\n    command: 'executeScriptResult',\n    params: message.params,\n    result: result\n  });\n}\n\n// Fonctions utilitaires communes\nexport function hideElement(selector: string): void {\n  const element = document.querySelector(selector);\n  if (element) {\n    element.classList.add('hidden');\n  }\n}\n\nexport function showElement(selector: string): void {\n  const element = document.querySelector(selector);\n  if (element) {\n    element.classList.remove('hidden');\n  }\n}\n\nexport function toggleElement(selector: string): void {\n  const element = document.querySelector(selector);\n  if (element) {\n    element.classList.toggle('hidden');\n  }\n}\n\n// Gestionnaires d'\u00E9v\u00E9nements communs\ndocument.addEventListener('DOMContentLoaded', () => {\n  // Gestion des touches communes (\u00E0 impl\u00E9menter plus tard)\n  document.addEventListener('keydown', (event) => {\n    // TODO: Gestion du syst\u00E8me Vim-like\n    // f: focus search\n    // j/k: navigation\n    // etc.\n  });\n  \n  // Gestion de la console\n  const consoleInput = document.querySelector('#panel-console') as HTMLInputElement;\n  if (consoleInput) {\n    consoleInput.addEventListener('keydown', (event) => {\n      if (event.key === 'Enter') {\n        const command = consoleInput.value.trim();\n        if (command) {\n          // Envoyer la commande \u00E0 l'extension\n          vscode.postMessage({\n            command: 'console-command',\n            value: command\n          });\n          consoleInput.value = '';\n        }\n      }\n    });\n  }\n});", "import '../common';\nimport { CommonClassItem, ItemData } from '../CommonClassItem';\nimport { CachedEntryData, StringNormalizer } from '../CacheTypes';\nimport { CacheableItem, CacheManager } from '../CacheManager';\n\nexport interface EntryData extends ItemData {\n  entree: string;\n  genre: string;\n  categorie_id?: string;\n  definition?: string;\n}\n\nexport class Entry extends CommonClassItem {\n  static readonly minName = 'entry';\n  \n  // Cache manager sp\u00E9cifique aux entr\u00E9es\n  private static _cacheManagerInstance: CacheManager<EntryData, CachedEntryData> = new CacheManager();\n  \n  protected static get cacheManager(): CacheManager<EntryData, CachedEntryData> {\n    return this._cacheManagerInstance;\n  }\n  \n  static readonly ERRORS = {\n    'no-items': 'Aucune entr\u00E9e dans la base, bizarrement\u2026',\n  };\n\n  static readonly GENRES = {\n    'nm': 'n.m.',\n    'nf': 'n.f.',\n    'np': 'n.pl.',\n    'vb': 'verbe',\n    'adj': 'adj.',\n    'adv': 'adv.'\n  };\n\n  /**\n   * Pr\u00E9pare une entr\u00E9e pour le cache de recherche\n   * SEULE m\u00E9thode sp\u00E9cifique - le reste h\u00E9rite de CommonClassItem !\n   */\n  static prepareItemForCache(entry: EntryData): CachedEntryData {\n    const entreeNormalized    = StringNormalizer.toLower(entry.entree);\n    const entreeRationalized  = StringNormalizer.rationalize(entry.entree);\n   \n    return {\n      id: entry.id,\n      entree: entry.entree,\n      definition: undefined, // d\u00E9finition format\u00E9e\n      raw_definition: entry.definition,\n      entree_min: entreeNormalized,\n      entree_min_ra: entreeRationalized,\n      categorie_id: entry.categorie_id,\n      categorie: undefined,\n      genre: entry.genre,\n      genre_formated: undefined, // sera d\u00E9fini plus tard\n    };\n  }\n\n\n  /**\n   * M\u00E9thode qui, apr\u00E8s chargement de toutes les donn\u00E9es, finalise la\n   * donn\u00E9e cache\n   * \n   * @param item Entr\u00E9e du dictionnaire\n   */\n  static finalizeCachedItem(item: CacheableItem): void {\n    // R\u00E9soudre la cat\u00E9gorie (c'est possible maintenant que toutes les\n    // donn\u00E9es sont conn\u00E9es) \n    let categorie: string | undefined;\n    if (item.categorie_id) {\n      const categorieEntry = this.cacheManager.get(item.categorie_id);\n      categorie = categorieEntry ? (categorieEntry as CachedEntryData).entree : undefined;\n      item.categorie = categorie ; \n    } else {\n      item.categorie = '-- hors cat\u00E9gorie --' ;\n    }\n    \n    // Mise en forme de la d\u00E9finition\n    item.definition = item.raw_definition ; // TODO \u00E0 mettre en forme\n\n    // Mise en forme du genre\n    item.genre_formated = this.GENRES[item.genre as keyof typeof this.GENRES] || `# genre ${item.genre} inconnu #`;\n  }\n  \n  /**\n   * Recherche d'entr\u00E9es par pr\u00E9fixe (optimis\u00E9e)\n   * M\u00E9thode sp\u00E9cifique Entry\n   */\n  protected static searchMatchingItems(prefix: string): CachedEntryData[] {\n    const prefixLower = StringNormalizer.toLower(prefix);\n    const prefixRa = StringNormalizer.rationalize(prefix);\n    \n    return this.filter((entry: any) => {\n      return entry.entree_min.startsWith(prefixLower) || \n             entry.entree_min_ra.startsWith(prefixRa);\n    }) as CachedEntryData[];\n  }\n  \n  // M\u00E9thodes typ\u00E9es pour plus de confort (optionnel)\n  static get(id: string): CachedEntryData | null {\n    return super.get(id) as CachedEntryData | null;\n  }\n  \n  static getAll(): CachedEntryData[] {\n    return super.getAll() as CachedEntryData[];\n  }\n}\n\n// Pour exposer globalement\n(window as any).Entry = Entry ;\n"],
  "mappings": "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",
  "names": []
}
