{
  "version": 3,
  "sources": ["../src/webviews/ClientItem.ts", "../src/webviews/ClientPanel.ts", "../src/bothside/RpcChannel.ts", "../src/webviews/RpcClient.ts", "../src/webviews/entries/Entry.ts"],
  "sourcesContent": ["import { UEntry } from \"../bothside/UEntry\";\nimport { UExemple } from \"../bothside/UExemple\";\nimport { UOeuvre } from \"../bothside/UOeuvre\";\nimport { Entry } from \"./entries/Entry\";\nimport { Exemple } from \"./exemples/Exemple\";\nimport { Oeuvre } from \"./oeuvres/Oeuvre\";\nimport { FullEntry } from \"../extension/models/Entry\";\nimport { FullOeuvre } from \"../extension/models/Oeuvre\";\nimport { FullExemple } from \"../extension/models/Exemple\";\n\ntype Tel_u = FullEntry | FullOeuvre | FullExemple;\ntype Tel = typeof Entry | typeof Oeuvre | typeof Exemple;\n\nexport abstract class ClientItem<Tel, Tel_u> {\n  data: Tel_u;\n  static klass: any;\n  static deserializeItems(items: string[]) {\n    return items.map( item => new this.klass(JSON.parse(item)));\n  }\n  constructor(itemData: Tel_u){\n    this.data = itemData;\n  } \n}", "import { Entry } from \"./entries/Entry\";\nimport { Exemple } from \"./exemples/Exemple\";\nimport { Oeuvre } from \"./oeuvres/Oeuvre\";\n\ntype Tel = typeof Entry | typeof Oeuvre | typeof Exemple;\n\nexport abstract class ClientPanel<Tel> {\n  static _container: HTMLElement | null;\n  static _itemTemplate: HTMLTemplateElement | null;\n\n  static get container(): HTMLElement | null {\n    return this._container || (this._container = document.querySelector('main#items'));\n  }\n  static get itemTemplate(): HTMLTemplateElement | null {\n    return this._itemTemplate || (this._itemTemplate = document.querySelector('template#item-template'));\n  }\n  static cloneItemTemplate(): DocumentFragment | null {\n    return this.itemTemplate!.content.cloneNode(true) as DocumentFragment;\n  }\n}\n\n", "/**\n * Canal RPC pour communiquer entre extension et webview.\n * Les deux c\u00F4t\u00E9s chargent ce module.\n */\ntype Request = {\n  id: number;\n  method: string;\n  params: any;\n};\n\ntype Response = {\n  id: number;\n  result: any;\n};\n\ntype Notification = {\n  method: string;\n  params: any;\n};\n\nexport class RpcChannel {\n  private counter = 0;\n  private pending = new Map<number, (value: any) => void>();\n  private handlers = new Map<string, (params: any) => any>();\n\n  constructor(\n    private sender: (msg: any) => void,\n    private receiver: (cb: (msg: any) => void) => void\n  ) {\n    this.receiver(this.handleMessage.bind(this));\n  }\n\n  private handleMessage(msg: any) {\n    if (\"id\" in msg && \"method\" in msg) {\n      // C\u2019est une requ\u00EAte (ask c\u00F4t\u00E9 oppos\u00E9)\n      const handler = this.handlers.get(msg.method);\n      if (handler) {\n        Promise.resolve(handler(msg.params)).then((result) => {\n          this.sender({ id: msg.id, result });\n        });\n      }\n    } else if (\"id\" in msg && \"result\" in msg) {\n      // R\u00E9ponse\n      const cb = this.pending.get(msg.id);\n      if (cb) {\n        cb(msg.result);\n        this.pending.delete(msg.id);\n      }\n    } else if (\"method\" in msg) {\n      // Notification (notify c\u00F4t\u00E9 oppos\u00E9)\n      const handler = this.handlers.get(msg.method);\n      if (handler) {\n        handler(msg.params);\n      }\n    }\n  }\n\n  ask(method: string, params?: any): Promise<any> {\n    const id = this.counter++;\n    const req: Request = { id, method, params };\n    this.sender(req);\n    return new Promise((resolve) => {\n      this.pending.set(id, resolve);\n    });\n  }\n\n  notify(method: string, params?: any) {\n    const notif: Notification = { method, params };\n    this.sender(notif);\n  }\n\n  on(method: string, handler: (params: any) => any) {\n    this.handlers.set(method, handler);\n  }\n}\n", "import { RpcChannel } from \"../bothside/RpcChannel\";\n\nexport function createRpcClient() {\n  return new RpcChannel(\n    (msg) => window.parent.postMessage(msg, \"*\"),\n    (cb) => window.addEventListener(\"message\", (event) => cb(event.data))\n  );\n}\n", "/**\n * Module pour les Entr\u00E9es\n * \n * Chaque module Entr\u00E9e, Oeuvres et Exemples est compos\u00E9 de trois\n * parties interactives :\n * \n *  1) Le mod\u00E8le, g\u00E9rant les \u00E9l\u00E9ments en tant que tels, les Entry par exemple\n *  2) Le panneau, qui interagit avec le Dom (DOMEntry ou PanelEntry)\n *  3) La section Rpc (RpcEntry) qui permet de communiquer avec l'extension,\n *     pour enregistrer des informations ou obtenir des donn\u00E9es des autres\n *     panneaux.\n */\nimport { UEntry } from '../../bothside/UEntry';\nimport { FullEntry } from '../../extension/models/Entry';\nimport { ClientItem } from '../ClientItem';\nimport { ClientPanel } from '../ClientPanel';\nimport { createRpcClient } from '../RpcClient';\n\ntype Tinstance = InstanceType<typeof UEntry>\n\nexport class Entry extends ClientItem<UEntry, FullEntry> {\n  static readonly minName = 'entry';\n  static readonly klass = Entry;\n \n  // /**\n  //  * Recherche d'entr\u00E9es par pr\u00E9fixe (optimis\u00E9e)\n  //  * M\u00E9thode sp\u00E9cifique Entry\n  //  */\n  // protected static searchMatchingItems(prefix: string): CachedEntryData[] {\n  //   const prefixLower = StringNormalizer.toLower(prefix);\n  //   const prefixRa = StringNormalizer.rationalize(prefix);\n    \n  //   return this.filter((entry: any) => {\n  //     return entry.entree_min.startsWith(prefixLower) || \n  //            entry.entree_min_ra.startsWith(prefixRa);\n  //   }) as CachedEntryData[];\n  // }\n}\nclass PanelEntry extends ClientPanel<Entry> {\n  static minName = 'entry';\n static populate(items: Entry[]): void {\n    items.forEach((item: Entry, index: number) => {\n      console.log(\"Je dois \u00E9crire l'item\", item.data);\n      const data = item.data;\n      const clone = this.cloneItemTemplate() as DocumentFragment;\n      const mainElement = clone.querySelector('.' + this.minName);\n      if ( mainElement ) {\n        mainElement.setAttribute('data-id', data.id);\n        mainElement.setAttribute('data-index', index.toString());\n      }\n\n      // R\u00E9gler les props\n      Object.keys(data).forEach(prop => {\n        const value = ((data as unknown) as Record<string, string>)[prop] as string;\n        clone\n          .querySelectorAll(`[data-prop=\"${prop}\"]`)\n          .forEach( element => {\n            if ( value.startsWith('<') ) {\n              element.innerHTML = value;\n            } else {\n              element.textContent = value;\n            }\n          });\n      });\n      // Et on l'ajoute au conteneur\n      this.container && this.container.appendChild(clone);\n    });\n\n    // TODO Ici, plus tard, on pourra appeler afterDisplayItems\n  }\n\n}\n\nconst RpcEntry = createRpcClient();\nRpcEntry.on('populate', (params) => {\n  const items = Entry.deserializeItems(params.data);\n  console.log(\"[CLIENT Entry] Items d\u00E9s\u00E9rialis\u00E9\", items);\n  PanelEntry.populate(items);\n});\n\n// Pour exposer globalement\n(window as any).Entry = Entry ;\n"],
  "mappings": "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",
  "names": []
}
