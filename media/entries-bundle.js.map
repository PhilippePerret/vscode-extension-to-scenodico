{
  "version": 3,
  "sources": ["../src/bothside/StringUtils.ts", "../src/webviews/ClientItem.ts", "../src/webviews/ClientPanel.ts", "../src/bothside/RpcChannel.ts", "../src/webviews/RpcClient.ts", "../src/webviews/models/Entry.ts"],
  "sourcesContent": ["/**\n * Utilitaire pour normaliser les cha\u00EEnes de caract\u00E8res\n * (suppression des accents, minuscules, etc.)\n */\nexport class StringNormalizer {\n  /**\n   * Normalise une cha\u00EEne en minuscules\n   */\n  static toLower(text: string): string {\n    return text.toLowerCase();\n  }\n\n  /**\n   * Normalise une cha\u00EEne en supprimant les accents et diacritiques\n   * TODO: \u00C0 am\u00E9liorer avec une vraie fonction de normalisation\n   */\n  static rationalize(text: string): string {\n    return text\n      .toLowerCase()\n      .normalize('NFD') // D\u00E9compose les caract\u00E8res accentu\u00E9s\n      .replace(/[\\u0300-\\u036f]/g, '') // Supprime les marques diacritiques\n      .replace(/[^a-zA-Z0-9]/g, '');  // note : si c'\u00E9tait avant la ligne pr\u00E9c\u00E9dente, il n'y aurait pas besoin de la ligne pr\u00E9c\u00E9dente\u2026\n  }\n}\n", "import { UEntry } from \"../bothside/UEntry\";\nimport { UExemple } from \"../bothside/UExemple\";\nimport { UOeuvre } from \"../bothside/UOeuvre\";\nimport { Entry } from \"./models/Entry\";\nimport { Exemple } from \"./models/Exemple\";\nimport { Oeuvre } from \"./models/Oeuvre\";\nimport { FullEntry } from \"../extension/models/Entry\";\nimport { FullOeuvre } from \"../extension/models/Oeuvre\";\nimport { FullExemple } from \"../extension/models/Exemple\";\n\ntype Tel_u = FullEntry | FullOeuvre | FullExemple;\ntype Tel = typeof Entry | typeof Oeuvre | typeof Exemple;\n\nexport abstract class ClientItem<Tel, Tel_u> {\n  data: Tel_u;\n  static klass: any;\n  static allItems: any[];\n  static deserializeItems(items: string[]) {\n    this.allItems = items.map( item => new this.klass(JSON.parse(item)));\n    return this.allItems;\n  }\n  constructor(itemData: Tel_u){\n    this.data = itemData;\n  } \n}", "import { Entry } from \"./models/Entry\";\nimport { Exemple } from \"./models/Exemple\";\nimport { Oeuvre } from \"./models/Oeuvre\";\n\ntype AnyElementClass = Entry | Oeuvre | Exemple;\n\nexport abstract class ClientPanel {\n  static readonly minName: string;\n  static readonly titName: string;\n  static _container: HTMLElement | null;\n  static _itemTemplate: HTMLTemplateElement | null;\n  static _searchInput: HTMLInputElement | null;\n  protected static get allItems(): any[]{ return []; };\n\n  static get container(): HTMLElement | null { return this._container || (this._container = document.querySelector('main#items')); }\n  static get itemTemplate(): HTMLTemplateElement | null { return this._itemTemplate || (this._itemTemplate = document.querySelector('template#item-template')); }\n  static get searchInput(): HTMLInputElement | null { return this._searchInput || (this._searchInput = document.querySelector('#search-input')); }\n\n  static cloneItemTemplate(): DocumentFragment | null {\n    return this.itemTemplate!.content.cloneNode(true) as DocumentFragment;\n  }\n  static populate(items: AnyElementClass[]): void {\n    (this.container as HTMLDivElement).innerHTML = '';\n    items.forEach((item: AnyElementClass, index: number) => {\n      const data = item.data;\n      const clone = this.cloneItemTemplate() as DocumentFragment;\n      const mainElement = clone.querySelector('.' + this.minName);\n      if (mainElement) {\n        mainElement.setAttribute('data-id', data.id);\n        mainElement.setAttribute('data-index', index.toString());\n      }\n      // R\u00E9gler les props\n      Object.keys(data).forEach(prop => {\n        let value = ((data as unknown) as Record<string, string>)[prop] as string;\n        // value = String(value);\n        value = this.formateProp(item, prop, value);\n        clone\n          .querySelectorAll(`[data-prop=\"${prop}\"]`)\n          .forEach(element => {\n            if (value.startsWith('<')) {\n              element.innerHTML = value;\n            } else {\n              element.textContent = value;\n            }\n          });\n      });\n      // Et on l'ajoute au conteneur\n      this.container && this.container.appendChild(clone);\n    });\n\n    // TODO Ici, plus tard, on pourra appeler afterDisplayItems\n    this.afterDisplayItems();\n\n    // Pour observer le panneau (les boutons, le champ de filtre, etc.)\n    this.observePanel();\n  }\n\n  // Si l'\u00E9l\u00E9ment n\u00E9cessite un traitement particulier de ses propri\u00E9t\u00E9s, il doit\n  // impl\u00E9menter cette m\u00E9thode\n  // (pour le moment, c'est seulement le cas pour les exemples)\n  static formateProp(item: AnyElementClass, prop: string, value: string | number): string {\n    return String(value);\n  }\n  \n  // M\u00E9thode appel\u00E9e apr\u00E8s l'affichage des \u00E9l\u00E9ments et avant\n  // l'observation du panneau\n  static afterDisplayItems():void {}\n\n  // Attention, certains panneaux ont leur propre m\u00E9thode, qui peut \n  // aussi appeler celle-ci\n  static observePanel(): void {\n   // \u00C9couter le champ de filtre en haut des panneaux\n    const Input = this.searchInput as HTMLInputElement;\n    Input.addEventListener('input', this.filterItems.bind(this));\n    Input.addEventListener('keyup', this.filterItems.bind(this));\n  }\n\n  static filterItems(ev: any) {\n    const Input = this.searchInput as HTMLInputElement;\n    const searched = Input.value.trim();\n    const allCount = this.allItems.length;\n    const matchingItems: any[] = this.searchMatchingItems(searched);\n    const matchingCount = matchingItems.length;\n    console.log('[CLIENT %s] Filtering with \"%s\" - %i founds / %i', this.titName, searched, matchingCount, allCount);\n    const matchingIds = new Set(matchingItems.map(item => item.data.id));\n    this.allItems.forEach(item => {\n      const display = matchingIds.has(item.data.id) ? 'block' : 'none';\n      if (item.data.display !== display) {\n        // <= L'item a chang\u00E9 d'\u00E9tat\n        // => Il faut le modifier dans le DOM\n        const obj = document.querySelector(`main#items > div.item[data-id=\"${item.data.id}\"]`) as HTMLDivElement;\n        obj.style.display = display;\n        item.data.display = display;\n        item.data.selected = false; // TODO en faire plus\n      };\n    });\n    // TODO Traiter la s\u00E9lection (toujours la mettre au premier \u00E9l\u00E9ment visible)\n  };\n  // M\u00E9thode de filtrage qui re\u00E7oit les \u00E9v\u00E8nements Input\n\n\n  // Fonction de recherche qui doit \u00EAtre surclass\u00E9e par toutes les\n  // classes h\u00E9riti\u00E8re\n  static searchMatchingItems(search: string): any[] {\n    return [];\n  }\n  static filter(filtre: (item: AnyElementClass) => boolean): AnyElementClass[] {\n    const result: AnyElementClass[] = [];\n    this.allItems.forEach(item => { filtre(item.data) && result.push(item); });\n    return result;\n  }\n\n}\n\n", "/**\n * Canal RPC pour communiquer entre extension et webview.\n * Les deux c\u00F4t\u00E9s chargent ce module.\n */\ntype Request = {\n  id: number;\n  method: string;\n  params: any;\n};\n\ntype Response = {\n  id: number;\n  result: any;\n};\n\ntype Notification = {\n  method: string;\n  params: any;\n};\n\nexport class RpcChannel {\n  private counter = 0;\n  private pending = new Map<number, (value: any) => void>();\n  private handlers = new Map<string, (params: any) => any>();\n\n  constructor(\n    private sender: (msg: any) => void,\n    private receiver: (cb: (msg: any) => void) => void\n  ) {\n    this.receiver(this.handleMessage.bind(this));\n  }\n\n  private handleMessage(msg: any) {\n    if (\"id\" in msg && \"method\" in msg) {\n      // C\u2019est une requ\u00EAte (ask c\u00F4t\u00E9 oppos\u00E9)\n      const handler = this.handlers.get(msg.method);\n      if (handler) {\n        Promise.resolve(handler(msg.params)).then((result) => {\n          this.sender({ id: msg.id, result });\n        });\n      }\n    } else if (\"id\" in msg && \"result\" in msg) {\n      // R\u00E9ponse\n      const cb = this.pending.get(msg.id);\n      if (cb) {\n        cb(msg.result);\n        this.pending.delete(msg.id);\n      }\n    } else if (\"method\" in msg) {\n      // Notification (notify c\u00F4t\u00E9 oppos\u00E9)\n      const handler = this.handlers.get(msg.method);\n      if (handler) {\n        handler(msg.params);\n      }\n    }\n  }\n\n  ask(method: string, params?: any): Promise<any> {\n    const id = this.counter++;\n    const req: Request = { id, method, params };\n    this.sender(req);\n    return new Promise((resolve) => {\n      this.pending.set(id, resolve);\n    });\n  }\n\n  notify(method: string, params?: any) {\n    console.log(\"Message re\u00E7u dans le 'notify' du RpcChannel\", method, params);\n    const notif: Notification = { method, params };\n    this.sender(notif);\n  }\n\n  on(method: string, handler: (params: any) => any) {\n    console.log(\"Message re\u00E7u dans le 'on' du RpcChannel\", method, handler);\n    this.handlers.set(method, handler);\n  }\n}\n", "import { RpcChannel } from \"../bothside/RpcChannel\";\n\ndeclare function acquireVsCodeApi(): {\n  postMessage: (msg: any) => void;\n};\n\nexport function createRpcClient() {\n  const vscode = acquireVsCodeApi();\n\n  return new RpcChannel(\n    // sender : envoie vers l'extension\n    (msg) => vscode.postMessage(msg),\n    // receiver : re\u00E7oit les messages de l'extension\n    (cb) => window.addEventListener(\"message\", (event) => cb(event.data))\n  );\n}", "/**\n * Module pour les Entr\u00E9es\n * \n * Chaque module Entr\u00E9e, Oeuvres et Exemples est compos\u00E9 de trois\n * parties interactives :\n * \n *  1) Le mod\u00E8le, g\u00E9rant les \u00E9l\u00E9ments en tant que tels, les Entry par exemple\n *  2) Le panneau, qui interagit avec le Dom (DOMEntry ou PanelEntry)\n *  3) La section Rpc (RpcEntry) qui permet de communiquer avec l'extension,\n *     pour enregistrer des informations ou obtenir des donn\u00E9es des autres\n *     panneaux.\n */\nimport { UEntry } from '../../bothside/UEntry';\nimport { FullEntry } from '../../extension/models/Entry';\nimport { StringNormalizer } from '../../bothside/StringUtils';\nimport { ClientItem } from '../ClientItem';\nimport { ClientPanel } from '../ClientPanel';\nimport { createRpcClient } from '../RpcClient';\n\ntype Tinstance = InstanceType<typeof UEntry>\n\nexport class Entry extends ClientItem<UEntry, FullEntry> {\n  static readonly minName = 'entry';\n  static readonly klass = Entry;\n\n  static get(entryId: string): Entry {\n    // Pour le moment on fait comme \u00E7a, mais ensuite on fera une Map\n    const entryData = PanelEntry.allItems.find(item => item.data.id === entryId);\n    const entry = new Entry(entryData.data);\n    console.log(\"Entr\u00E9e trouv\u00E9e : \", entry);\n    return entry;\n  }\n  \n  constructor(data: FullEntry) {\n    super(data);\n    this.id = data.id;\n  }\n  private _obj: HTMLDivElement | undefined = undefined ;\n  private id: string;\n\n  scrollTo(){\n    this.isNotVisible && this.setVisible();\n    this.obj.scrollIntoView({behavior: 'auto', block: 'center'});\n    return this; // chainage\n  }\n  select(){\n    this.obj.classList.add('selected');\n    return this; // chainage\n  }\n  setVisible(){\n    this.obj.style.display = 'block';\n    this.data.display = 'block';\n  }\n  get isNotVisible(){ return this.data.display === 'none'; }\n\n  get obj(): HTMLDivElement {\n    return (this._obj as HTMLDivElement) || (this._obj = document.querySelector(`main#items > div[data-id=\"${this.id}\"]`) as HTMLDivElement);\n  }\n  \n \n}\n\nclass PanelEntry extends ClientPanel {\n  static readonly minName = 'entry';\n  static readonly titName = 'Entry';\n  static get allItems() { return Entry.allItems; }\n  // M\u00E9thode de filtrage des entr\u00E9es\n  // Retourne celles qui commencent par +search+\n  static searchMatchingItems(searched: string): Entry[] {\n    const prefixLower = StringNormalizer.toLower(searched);\n    const prefixRa = StringNormalizer.rationalize(searched);\n    return this.filter((entryData: {[k:string]: any}) => {\n      return entryData.entree_min.startsWith(prefixLower) || \n             entryData.entree_min_ra.startsWith(prefixRa);\n    }) as Entry[];\n  }\n\n  // Scroll jusqu'\u00E0 l'\u00E9l\u00E9ment et le s\u00E9lectionne\n  static scrollToAndSelectEntry(entryId: string){\n    Entry.get(entryId).scrollTo().select();\n  }\n}\n\nconst RpcEntry = createRpcClient();\nRpcEntry.on('populate', (params) => {\n  const items = Entry.deserializeItems(params.data);\n  console.log(\"[CLIENT Entry] Items d\u00E9s\u00E9rialis\u00E9\", items);\n  PanelEntry.populate(items);\n});\n\nRpcEntry.on('display-entry', (params) => {\n  console.log(\"[CLIENT] Je dois afficher l'entr\u00E9e '%s'\", params.entry_id);\n  PanelEntry.scrollToAndSelectEntry(params.entry_id);\n});\n\n// Pour exposer globalement\n(window as any).Entry = Entry ;\n"],
  "mappings": "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",
  "names": []
}
