{
  "version": 3,
  "sources": ["../src/bothside/StringUtils.ts", "../src/webviews/ClientItem.ts", "../src/webviews/ClientPanel.ts", "../src/bothside/RpcChannel.ts", "../src/webviews/RpcClient.ts", "../src/webviews/models/Exemple.ts"],
  "sourcesContent": ["/**\n * Utilitaire pour normaliser les cha\u00EEnes de caract\u00E8res\n * (suppression des accents, minuscules, etc.)\n */\nexport class StringNormalizer {\n  /**\n   * Normalise une cha\u00EEne en minuscules\n   */\n  static toLower(text: string): string {\n    return text.toLowerCase();\n  }\n\n  /**\n   * Normalise une cha\u00EEne en supprimant les accents et diacritiques\n   * TODO: \u00C0 am\u00E9liorer avec une vraie fonction de normalisation\n   */\n  static rationalize(text: string): string {\n    return text\n      .toLowerCase()\n      .normalize('NFD') // D\u00E9compose les caract\u00E8res accentu\u00E9s\n      .replace(/[\\u0300-\\u036f]/g, '') // Supprime les marques diacritiques\n      .replace(/[^a-zA-Z0-9]/g, '');  // note : si c'\u00E9tait avant la ligne pr\u00E9c\u00E9dente, il n'y aurait pas besoin de la ligne pr\u00E9c\u00E9dente\u2026\n  }\n}\n", "import { UEntry } from \"../bothside/UEntry\";\nimport { UExemple } from \"../bothside/UExemple\";\nimport { UOeuvre } from \"../bothside/UOeuvre\";\nimport { Entry } from \"./models/Entry\";\nimport { Exemple } from \"./models/Exemple\";\nimport { Oeuvre } from \"./models/Oeuvre\";\nimport { FullEntry } from \"../extension/models/Entry\";\nimport { FullOeuvre } from \"../extension/models/Oeuvre\";\nimport { FullExemple } from \"../extension/models/Exemple\";\n\ntype Tel_u = FullEntry | FullOeuvre | FullExemple;\ntype Tel = typeof Entry | typeof Oeuvre | typeof Exemple;\n\nexport abstract class ClientItem<Tel, Tel_u> {\n  data: Tel_u;\n  static klass: any;\n  static allItems: any[];\n  static deserializeItems(items: string[]) {\n    this.allItems = items.map( item => new this.klass(JSON.parse(item)));\n    return this.allItems;\n  }\n  constructor(itemData: Tel_u){\n    this.data = itemData;\n  } \n}", "import { Entry } from \"./models/Entry\";\nimport { Exemple } from \"./models/Exemple\";\nimport { Oeuvre } from \"./models/Oeuvre\";\n\ntype AnyElementClass = Entry | Oeuvre | Exemple;\n\nexport abstract class ClientPanel {\n  static readonly minName: string;\n  static readonly titName: string;\n  static _container: HTMLElement | null;\n  static _itemTemplate: HTMLTemplateElement | null;\n  static _searchInput: HTMLInputElement | null;\n  protected static get allItems(): any[]{ return []; };\n\n  static get container(): HTMLElement | null { return this._container || (this._container = document.querySelector('main#items')); }\n  static get itemTemplate(): HTMLTemplateElement | null { return this._itemTemplate || (this._itemTemplate = document.querySelector('template#item-template')); }\n  static get searchInput(): HTMLInputElement | null { return this._searchInput || (this._searchInput = document.querySelector('#search-input')); }\n\n  static cloneItemTemplate(): DocumentFragment | null {\n    return this.itemTemplate!.content.cloneNode(true) as DocumentFragment;\n  }\n  static populate(items: AnyElementClass[]): void {\n    (this.container as HTMLDivElement).innerHTML = '';\n    items.forEach((item: AnyElementClass, index: number) => {\n      const data = item.data;\n      const clone = this.cloneItemTemplate() as DocumentFragment;\n      const mainElement = clone.querySelector('.' + this.minName);\n      if (mainElement) {\n        mainElement.setAttribute('data-id', data.id);\n        mainElement.setAttribute('data-index', index.toString());\n      }\n      // R\u00E9gler les props\n      Object.keys(data).forEach(prop => {\n        let value = ((data as unknown) as Record<string, string>)[prop] as string;\n        // value = String(value);\n        value = this.formateProp(item, prop, value);\n        clone\n          .querySelectorAll(`[data-prop=\"${prop}\"]`)\n          .forEach(element => {\n            if (value.startsWith('<')) {\n              element.innerHTML = value;\n            } else {\n              element.textContent = value;\n            }\n          });\n      });\n      // Et on l'ajoute au conteneur\n      this.container && this.container.appendChild(clone);\n    });\n\n    // TODO Ici, plus tard, on pourra appeler afterDisplayItems\n    this.afterDisplayItems();\n\n    // Pour observer le panneau (les boutons, le champ de filtre, etc.)\n    this.observePanel();\n  }\n\n  // Si l'\u00E9l\u00E9ment n\u00E9cessite un traitement particulier de ses propri\u00E9t\u00E9s, il doit\n  // impl\u00E9menter cette m\u00E9thode\n  // (pour le moment, c'est seulement le cas pour les exemples)\n  static formateProp(item: AnyElementClass, prop: string, value: string | number): string {\n    return String(value);\n  }\n  \n  // M\u00E9thode appel\u00E9e apr\u00E8s l'affichage des \u00E9l\u00E9ments et avant\n  // l'observation du panneau\n  static afterDisplayItems():void {}\n\n  // Attention, certains panneaux ont leur propre m\u00E9thode, qui peut \n  // aussi appeler celle-ci\n  static observePanel(): void {\n   // \u00C9couter le champ de filtre en haut des panneaux\n    const Input = this.searchInput as HTMLInputElement;\n    Input.addEventListener('input', this.filterItems.bind(this));\n    Input.addEventListener('keyup', this.filterItems.bind(this));\n  }\n\n  static filterItems(ev: any) {\n    const Input = this.searchInput as HTMLInputElement;\n    const searched = Input.value.trim();\n    const allCount = this.allItems.length;\n    const matchingItems: any[] = this.searchMatchingItems(searched);\n    const matchingCount = matchingItems.length;\n    console.log('[CLIENT %s] Filtering with \"%s\" - %i founds / %i', this.titName, searched, matchingCount, allCount);\n    const matchingIds = new Set(matchingItems.map(item => item.data.id));\n    this.allItems.forEach(item => {\n      const display = matchingIds.has(item.data.id) ? 'block' : 'none';\n      if (item.data.display !== display) {\n        // <= L'item a chang\u00E9 d'\u00E9tat\n        // => Il faut le modifier dans le DOM\n        const obj = document.querySelector(`main#items > div.item[data-id=\"${item.data.id}\"]`) as HTMLDivElement;\n        obj.style.display = display;\n        item.data.display = display;\n        item.data.selected = false; // TODO en faire plus\n      };\n    });\n    // TODO Traiter la s\u00E9lection (toujours la mettre au premier \u00E9l\u00E9ment visible)\n  };\n  // M\u00E9thode de filtrage qui re\u00E7oit les \u00E9v\u00E8nements Input\n\n\n  // Fonction de recherche qui doit \u00EAtre surclass\u00E9e par toutes les\n  // classes h\u00E9riti\u00E8re\n  static searchMatchingItems(search: string): any[] {\n    return [];\n  }\n  static filter(filtre: (item: AnyElementClass) => boolean): AnyElementClass[] {\n    const result: AnyElementClass[] = [];\n    this.allItems.forEach(item => { filtre(item.data) && result.push(item); });\n    return result;\n  }\n\n}\n\n", "/**\n * Canal RPC pour communiquer entre extension et webview.\n * Les deux c\u00F4t\u00E9s chargent ce module.\n */\ntype Request = {\n  id: number;\n  method: string;\n  params: any;\n};\n\ntype Response = {\n  id: number;\n  result: any;\n};\n\ntype Notification = {\n  method: string;\n  params: any;\n};\n\nexport class RpcChannel {\n  private counter = 0;\n  private pending = new Map<number, (value: any) => void>();\n  private handlers = new Map<string, (params: any) => any>();\n\n  constructor(\n    private sender: (msg: any) => void,\n    private receiver: (cb: (msg: any) => void) => void\n  ) {\n    this.receiver(this.handleMessage.bind(this));\n  }\n\n  private handleMessage(msg: any) {\n    if (\"id\" in msg && \"method\" in msg) {\n      // C\u2019est une requ\u00EAte (ask c\u00F4t\u00E9 oppos\u00E9)\n      const handler = this.handlers.get(msg.method);\n      if (handler) {\n        Promise.resolve(handler(msg.params)).then((result) => {\n          this.sender({ id: msg.id, result });\n        });\n      }\n    } else if (\"id\" in msg && \"result\" in msg) {\n      // R\u00E9ponse\n      const cb = this.pending.get(msg.id);\n      if (cb) {\n        cb(msg.result);\n        this.pending.delete(msg.id);\n      }\n    } else if (\"method\" in msg) {\n      // Notification (notify c\u00F4t\u00E9 oppos\u00E9)\n      const handler = this.handlers.get(msg.method);\n      if (handler) {\n        handler(msg.params);\n      }\n    }\n  }\n\n  ask(method: string, params?: any): Promise<any> {\n    const id = this.counter++;\n    const req: Request = { id, method, params };\n    this.sender(req);\n    return new Promise((resolve) => {\n      this.pending.set(id, resolve);\n    });\n  }\n\n  notify(method: string, params?: any) {\n    console.log(\"Message re\u00E7u dans le 'notify' du RpcChannel\", method, params);\n    const notif: Notification = { method, params };\n    this.sender(notif);\n  }\n\n  on(method: string, handler: (params: any) => any) {\n    console.log(\"Message re\u00E7u dans le 'on' du RpcChannel\", method, handler);\n    this.handlers.set(method, handler);\n  }\n}\n", "import { RpcChannel } from \"../bothside/RpcChannel\";\n\ndeclare function acquireVsCodeApi(): {\n  postMessage: (msg: any) => void;\n};\n\nexport function createRpcClient() {\n  const vscode = acquireVsCodeApi();\n\n  return new RpcChannel(\n    // sender : envoie vers l'extension\n    (msg) => vscode.postMessage(msg),\n    // receiver : re\u00E7oit les messages de l'extension\n    (cb) => window.addEventListener(\"message\", (event) => cb(event.data))\n  );\n}", "import { RpcChannel } from '../../bothside/RpcChannel';\nimport { UExemple } from '../../bothside/UExemple';\nimport { FullExemple } from '../../extension/models/Exemple';\nimport { StringNormalizer } from '../../bothside/StringUtils';\nimport { ClientItem } from '../ClientItem';\nimport { ClientPanel } from '../ClientPanel';\nimport { createRpcClient } from '../RpcClient';\n\nconst RpcEx: RpcChannel = createRpcClient();\n\nexport class Exemple extends ClientItem<UExemple, FullExemple> {\n  static readonly minName = 'exemple';\n  static readonly klass = Exemple;\n\n}\n\ninterface OTitre {\n  id: string;\n  obj: HTMLDivElement;        // l'objet complet du titre\n  display: 'block' | 'none';  // pour savoir s'il est affich\u00E9 ou non\n  titre: string;              // le titre affich\u00E9\n}\n\nclass PanelExemple extends ClientPanel {\n  static readonly minName = 'exemple';\n  static titName = 'Exemple';\n  static modeFiltre = 'by-title';\n  static get allItems() { return Exemple.allItems; }\n  static BlockTitres: Map<string, OTitre> = new Map();\n\n  static initialize(){\n    // On montre le menu qui permet de choisir le mode de filtrage de\n    // la liste.\n    (document.querySelector('#search-by-div') as HTMLDivElement)\n      .classList.remove('hidden');\n  }\n\n  // Certaines propri\u00E9t\u00E9s re\u00E7oivent un traitement particulier :\n  // - l'entr\u00E9e re\u00E7oit un lien pour rejoindre la d\u00E9finition dans le panneau des d\u00E9finitions\n  static formateProp(ex: Exemple, prop: string, value: string | number): string {\n\n    switch(prop) {\n      case 'entree_formated':\n        return `<a data-type=\"entry\" data-id=\"${ex.data.entry_id}\">${value}</a>`;\n      default: return String(value);\n    }\n  }\n  \n  static observePanel(): void {\n    super.observePanel();\n    this.menuModeFiltre.addEventListener('change', this.onChangeModeFiltre.bind(this));\n    // On place un observateur sur les <a data-type data-id> pour qu'ils appellent\n    // les messages voulus\n    // data-type=\"entry\" pour rejoindre les d\u00E9finitions (afficher la d\u00E9finition voulue)\n    // data-type=\"oeuvre\" pour rejoindre l'\u0153uvre voulue (l'afficher)\n    this.container?.querySelectorAll('a[data-type][data-id]').forEach(link => {\n      link.addEventListener('click', this.onClickLinkToEntry.bind(this, link));\n    });\n  }\n  static onClickLinkToEntry(link: Element, _ev: any){\n    const entryId = (link as HTMLElement).dataset.id;\n    console.log(\"[CLIENT] Demande d'affichage de l'entr\u00E9e '%s'\", entryId);\n    RpcEx.notify('display-entry', {entry_id: entryId});\n  }\n\n\n  static onChangeModeFiltre(_ev: any){\n    this.modeFiltre = this.menuModeFiltre.value;\n    console.info(\"Le mode de filtrage a \u00E9t\u00E9 mis \u00E0 '%s'\", this.modeFiltre);\n  }\n  static get menuModeFiltre(){return (document.querySelector('#search-by') as HTMLSelectElement);}\n  \n  /**\n   * Appel\u00E9e apr\u00E8s l'affichage des exemples, principalement pour\n   * afficher les titres des oeuvres dans le DOM.\n   */\n  static afterDisplayItems(){\n    super.afterDisplayItems(); // on ne sait jamais \n    // Principe : on boucle sur tous les \u00E9l\u00E9ments (qui sont forc\u00E9ment \n    // class\u00E9s par oeuvre) et d\u00E8s qu'on passe \u00E0 une autre oeuvre on\n    // cr\u00E9e un nouveau titre.\n    let currentOeuvreId: string = ''; // le titre couramment affich\u00E9\n    this.allItems.forEach((item: Exemple): undefined => {\n      const ditem = item.data;\n      if ( ditem.oeuvre_id === currentOeuvreId ) { return ; }\n      // --- NOUVEAU TITRE ---\n      currentOeuvreId = ditem.oeuvre_id;\n      const obj = document.createElement('h2');\n      obj.className = 'titre-oeuvre';\n      const spanTit = document.createElement('span');\n      spanTit.className = 'titre';\n      spanTit.innerHTML = ditem.oeuvre_titre;\n      obj.appendChild(spanTit);\n      const titre = {\n        id: ditem.oeuvre_id,\n        obj: obj,\n        titre: ditem.oeuvre_titre,\n        display: 'block'\n      } as OTitre;\n      // On consigne ce titre pour pouvoir le manipuler facilement\n      this.BlockTitres.set(titre.id, titre);\n\n      const firstEx = document.querySelector(`main#items > div[data-id=\"${ditem.id}\"]`);\n      this.container?.insertBefore(obj, firstEx);\n    });\n  }\n  /**\n   * Filtrage des exemples \n   * M\u00E9thode sp\u00E9cifique Exemple\n   * \n   * En mode \"normal\"\n   * Le filtrage, sauf indication contraire, se fait par rapport aux\n   * titres de film. Le m\u00E9canisme est le suivant : l'user tape un\n   * d\u00E9but de titres de film. On en d\u00E9duit les titres gr\u00E2ce \u00E0 la\n   * m\u00E9thode de la classe Oeuvre. On prend l'identifiant et on \n   * affiche tous les exemples du film voulu.\n   * \n   * En mode \"Entr\u00E9e\", l'utilisateur tape une entr\u00E9e du dictionnaire\n   * et la m\u00E9thode renvoie tous les exemples concernant cette entr\u00E9e.\n   * \n   * En mode \"Contenu\", la recherche se fait sur le contenu, partout\n   * et sur toutes les entr\u00E9es.\n   * \n   */\n  public static searchMatchingItems(searched: string): Exemple[] {\n    const searchLow = StringNormalizer.toLower(searched);\n    const searchRa = StringNormalizer.rationalize(searched); \n    let exemplesFound: Exemple[];\n\n    switch (this.modeFiltre) {\n\n      case 'by-title':\n        // Filtrage par titre d'\u0153uvre (d\u00E9faut)\n        exemplesFound = this.filter((exData: {[k:string]: any}) => {\n          return exData.titresLookUp.some((titre: string) => {\n            return titre.substring(0, searchLow.length) === searchLow;\n          });\n        }) as Exemple[];\n        break;\n      case 'by-entry':\n        // Filtrage pour entr\u00E9e\n        exemplesFound = this.filter((exData: {[k:string]: any}) => {\n          const seg = exData.entry4filter.substring(0, searchLow.length);\n          return seg === searchLow || seg === searchRa;\n        }) as Exemple[];\n        break;\n      case 'by-content':\n         exemplesFound = this.filter((exData: {[k:string]: any}) => {\n          return exData.content_min.includes(searchLow) ||\n            exData.content_min_ra.includes(searchRa);\n        }) as Exemple[];\n        break;\n      default:\n        return [] ; // ne doit jamais \u00EAtre atteint, juste pour lint\n    }\n    // Traitement des titres\n    // On par du principe que les titres des exemples choisis doivent\n    // \u00EAtre affich\u00E9s (note : je pense que \u00E7a peut \u00EAtre une m\u00E9thode\n    // communes \u00E0 tous les filtrages)\n    \n    // Pour consigner les titres modifi\u00E9s\n    const titres2aff: Map<string, boolean> = new Map();\n\n    exemplesFound.forEach((ex: Exemple) => {\n      // Si le titre a d\u00E9j\u00E0 \u00E9t\u00E9 trait\u00E9, on passe au suivant\n      if ( titres2aff.has(ex.data.oeuvre_id)) { return ; }\n      titres2aff.set(ex.data.oeuvre_id, true);\n    });\n    // Ici, on a dans titres2aff les titres \u00E0 afficher\n    this.BlockTitres.forEach((btitre:OTitre) => {\n      const dispWanted = titres2aff.has(btitre.id) ? 'block' : 'none';\n      if ( btitre.display === dispWanted) { return ; }\n      btitre.display = dispWanted ;\n      btitre.obj.style.display = dispWanted;\n    });\n\n    return exemplesFound;\n }\n}\n\nRpcEx.on('populate', (params) => {\n  const items = Exemple.deserializeItems(params.data);\n  console.log(\"[CLIENT-Exemple] Items d\u00E9s\u00E9rialis\u00E9s\", items);\n  PanelExemple.populate(items);\n  PanelExemple.initialize();\n});\n(window as any).Exemple = Exemple;"],
  "mappings": "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",
  "names": []
}
